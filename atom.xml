<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小撸]]></title>
  <link href="http://fegg.github.io/atom.xml" rel="self"/>
  <link href="http://fegg.github.io/"/>
  <updated>2016-06-11T02:41:11+08:00</updated>
  <id>http://fegg.github.io/</id>
  <author>
    <name><![CDATA[小撸]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redux 能做什么？]]></title>
    <link href="http://fegg.github.io/blog/20160517/redux-can-do/"/>
    <updated>2016-05-17T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20160517/redux-can-do</id>
    <content type="html"><![CDATA[<h3 id="redux-">一、我先给一个 Redux 的定义</h3>

<p><code>Redux</code> 被大家知道应该都是来自于 <code>React</code> 的出现，但是这篇文章会通过介绍一个 <code>React</code> 之外的例子，来让大家理解 <code>Redux</code> 是什么东西，到底还能够做点撒。</p>

<p>我自己的理解是：</p>

<blockquote>
  <p>Redux 是一个改变<strong>状态(state)</strong>的模型，这个模型通过一个单向操作的方式来改变<strong>状态</strong>，用数学符号的方式来理解我认为应该是：<code>y = f(x) </code>，嗯，就是一个最简单的函数模型。</p>
</blockquote>

<p>不过这样说，有些人还会不理解，毕竟以前撸代码不是这个样子的，那么我们先反向的来获取自己的理解。</p>

<p>首先，我们需要知道 Redux 有的以下几个东西：</p>

<ul>
  <li>createStore</li>
  <li>reducer</li>
  <li>dispatch</li>
</ul>

<p>我觉得需要介绍清楚 Redux ，知道这三个就行了，至于还有一些函数我觉得都是调味料，这里先不介绍。</p>

<!-- more -->

<p>好吧，现在我就把上面的数学函数模型语义的转换一下（也许不一定对，但是可能暂时这样理解，理解是一个过程）：</p>

<ol>
  <li>第一步：<code>newState = store(reducer)(state)</code></li>
  <li>第二步：<code>newState = reducer(state)</code></li>
</ol>

<p>为什么这里可能理解成两个步骤呢？那是因为我们可以从不同的层面去认识 Redux，在第一步中我的理解是store里面的东西(reducer)去改变了 state，而在第二步中，我以实际会起到作用的层面去理解，就是 reducer 去改变了 state。</p>

<p>好吧，来个对比：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">y</span> <span class="o">=</span> <span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class="line"><span class="nx">newState</span> <span class="o">=</span> <span class="nx">reducer</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>最后我自己先得出一个结论：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">f</span> <span class="o">&lt;=&gt;</span> <span class="nx">reducer</span> <span class="p">(</span> <span class="o">&lt;=&gt;:</span> <span class="err">表示等价的意思</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>好吧，废话就上面那么多了，接下来我举一个实际的例子来理一下自己对 Redux 的理解，这个例子是我在一篇文章中看到的，觉得不错。</p>

<h3 id="section">二、 先介绍一下这个例子的效果</h3>

<p><img src="http://fegg.github.io/images/react/game.gif" alt="演示" /></p>

<p>这里我们要实现的效果就是：</p>

<p>点击飞机，让飞机随机移动到一个新的坐标点</p>

<p>这里我们可以理解为：新坐标[x1, y1] = f(原始坐标[x0, y0])</p>

<h3 id="section-1">三、开始撸一个实例</h3>

<p><strong>1.首先我们需要定义个 <code>f</code> 来修改坐标</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * reducer</span>
</span><span class="line"><span class="cm"> * @param state 坐标状态</span>
</span><span class="line"><span class="cm"> * @param action 执行的行为</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">coordinates</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="k">case</span> <span class="nx">CLICK</span><span class="o">:</span>
</span><span class="line">			<span class="k">return</span> <span class="p">[</span>
</span><span class="line">				<span class="nx">state</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">40</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">(),</span>
</span><span class="line">				<span class="nx">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">40</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span>
</span><span class="line">			<span class="p">]</span>
</span><span class="line">		<span class="k">default</span><span class="o">:</span>
</span><span class="line">			<span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>这个函数主要就是使初始坐标 <strong>[1, 1] =&gt; [1 + random, 1 + random]</strong> 这样返回一个全新的数组，这个全新的数组就是新的状态。</p>

<p><strong>2.我们再将这个 <code>f</code> 函数给 Redux 的 Store 去管理</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * 创建 Redux 的 Store(存储器)</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line"><span class="kd">let</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">coordinates</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>这个比较简单，就是通过传入 <code>f</code> 来创建一个 Store，对于 Redux 来说有且只有一个 Store，这个和 flux 有比较大的差别。</p>

<p><strong>3.然后再定义一个行为，使我们能够通过 dispatch 调用这个行为去改变 state</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * action</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">CLICK</span> <span class="o">=</span> <span class="s1">&#39;CLICK&#39;</span><span class="p">;</span>
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @returns plainObject =&gt; action</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">click</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">type</span><span class="o">:</span> <span class="nx">CLICK</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>在 Redux 中，只有通过 <code>dispatch</code> 方法去改变状态，就是因为这样，才让我们调试代码变得简单，复现 BUG 更加容易，因为它是单向的，顺着一个方向在流动数据。</p>

<p><strong>4.接下来就写一下 dispatch</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">plane</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">onInputDown</span><span class="p">.</span><span class="nx">add</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">click</span><span class="p">())</span>
</span><span class="line"><span class="p">},</span> <span class="kc">null</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>先抛开其他代码，我们剥离一下：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">click</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>

<p>这样就会去调用行为，然后执行我们上面定义的 <code>coordinates</code> 函数，返回一个新的坐标</p>

<p><strong>5.最后我们再订阅一下具体改变我们飞机位置的业务代码</strong></p>

<p>上面的写完后，我们只是返回来状态，但是还没体现到飞机在场景下的移动效果。我们能够通过</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<p>来获取最新的当前状态，其实在 Redux 源代码里面就是很简单的一个函数：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">getState</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// 这里的 currentState 是一个外部的变量，在 Store 的作用域下全局生效</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">currentState</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>好吧，现在我们让飞机订阅一下移动的函数：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">* 定义 plane(飞机) 的移动</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">movePlane</span><span class="p">(</span><span class="nx">plane</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">game</span><span class="p">.</span><span class="nx">add</span><span class="p">.</span><span class="nx">tween</span><span class="p">(</span><span class="nx">plane</span><span class="p">).</span><span class="nx">to</span><span class="p">({</span>
</span><span class="line">		<span class="nx">x</span><span class="o">:</span> <span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">		<span class="nx">y</span><span class="o">:</span> <span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">	<span class="p">},</span> <span class="mi">1000</span><span class="p">,</span> <span class="s1">&#39;Linear&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">* 移动事件的订阅</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line"><span class="nx">store</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">movePlane</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">plane</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>

<p>大家会想，为什么我订阅了就自动调用 movePlane 生效了呢？在 Redux 内部会调用当前的监听器，源代码如下，很简单，监听器就是一个数组来装的，最后移出来执行一下：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">subscribe</span><span class="p">(</span><span class="nx">listener</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">isSubscribed</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">	<span class="nx">ensureCanMutateNextListeners</span><span class="p">();</span>
</span><span class="line">	<span class="nx">nextListeners</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">listener</span><span class="p">);</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">// 然后会返回一个取消订阅的函数，这里省略</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// 省略一些杂七杂八的异常处理代码</span>
</span><span class="line">
</span><span class="line">	<span class="k">try</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">isDispatching</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">		<span class="nx">currentState</span> <span class="o">=</span> <span class="nx">currentReducer</span><span class="p">(</span><span class="nx">currentState</span><span class="p">,</span> <span class="nx">action</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">isDispatching</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// 执行的代码</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">listeners</span> <span class="o">=</span> <span class="nx">currentListeners</span> <span class="o">=</span> <span class="nx">nextListeners</span><span class="p">;</span>
</span><span class="line">	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">listeners</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">listeners</span><span class="p">[</span><span class="nx">i</span><span class="p">]();</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="k">return</span> <span class="nx">action</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>好吧，这样就是一个游戏的流程来，在 Redux 的帮助下，很好的组织了代码，优雅的完成了。执行代码的流程是这样的：</p>

<blockquote>
  <p>dispatch(click()) =&gt; update reducer =&gt; subscribe() =&gt; 飞机移动新位置</p>
</blockquote>

<p>这个例子很好的解释了脱离 React 的束缚，很纯粹的 Redux，原文翻译有点慢，干脆就自己写了一下。</p>

<p>项目所有的代码：<a href="https://github.com/fegg/redux-game">https://github.com/fegg/redux-game</a></p>

<p>参考英文原文：<a href="http://atendesigngroup.com/blog/redux-outside-react">http://atendesigngroup.com/blog/redux-outside-react</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个好玩的 CSS 技术 CheckBox]]></title>
    <link href="http://fegg.github.io/blog/20160110/checkbox-anim/"/>
    <updated>2016-01-10T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20160110/checkbox-anim</id>
    <content type="html"><![CDATA[<h3 id="section">废话</h3>

<p>＝＝晚上失眠了，在网页上看到一个好玩的效果，自己模拟了一下，最开始用SVG写的。。。不多说了，简单记录一下思路和写法。</p>

<h3 id="section-1">思路</h3>

<p>先贴一下效果图，脑袋里面留下直观印象。录的效果可能不太好，大家可以用代码本地跑起来看真实的效果。</p>

<p><img src="http://fegg.github.io/images/checkbox-anim.gif" alt="动态效果" /></p>

<ol>
  <li>构造一个简单的组件元素，采用 <code>::after</code> 伪元素来实现</li>
  <li>利用 CSS 中 <code>border</code> 来实现，并且利用 CSS3 动画来添加切换的动画效果</li>
  <li>主要利用 <code>rotate</code> 和 <code>scale</code> 的效果来实现</li>
  <li>JS 部分对类名的 <code>toggle</code></li>
</ol>

<!-- more -->

<h3 id="section-2">基本结构</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;checkbox-anim</span> <span class="na">class=</span><span class="s">&quot;checkbox_anim js_anim_normal&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;checkbox checkbox-span&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class="line"><span class="nt">&lt;/checkbox-anim&gt;</span>
</span><span class="line"><span class="nt">&lt;checkbox-anim</span> <span class="na">class=</span><span class="s">&quot;checkbox_anim js_anim_half&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;checkbox checkbox-span checkbox_half&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class="line"><span class="nt">&lt;/checkbox-anim&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>这里我的结构比较简单，<code>checkbox-anim</code> 组件属于 <strong>namespace</strong> 里面就是真正的组件肉体了。在真实使用的时候需要引入 <code>input</code> 组件，为了简单，这里就省略了，更清晰的看交互的实现。</p>

<h3 id="section-3">漂亮的修饰</h3>

<blockquote>
  <p>两个组件最基本的样式</p>
</blockquote>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="c">/********** checkbox 基本样式 *************/</span>
</span><span class="line"><span class="nc">.checkbox</span> <span class="p">{</span>
</span><span class="line">    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class="line">    <span class="k">width</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class="line">    <span class="k">height</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class="line">    <span class="k">background</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class="line">    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#e9e9e9</span><span class="p">;</span>
</span><span class="line">    <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">3px</span><span class="p">;</span>
</span><span class="line">    <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">transition</span><span class="o">:</span> <span class="n">all</span> <span class="m">.2s</span> <span class="n">cubic</span><span class="o">-</span><span class="n">bezier</span><span class="p">(</span><span class="o">.</span><span class="m">68</span><span class="o">,-.</span><span class="m">55</span><span class="o">,.</span><span class="m">27</span><span class="o">,</span><span class="m">1</span><span class="o">.</span><span class="m">55</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nc">.checkbox</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class="line">    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class="line">    <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;\20&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="k">width</span><span class="o">:</span> <span class="m">14px</span><span class="p">;</span>
</span><span class="line">    <span class="k">height</span><span class="o">:</span> <span class="m">24px</span><span class="p">;</span>
</span><span class="line">    <span class="k">border</span><span class="o">:</span> <span class="m">4px</span> <span class="k">solid</span> <span class="nb">white</span><span class="p">;</span>
</span><span class="line">    <span class="k">border-top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">border-left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">45</span><span class="n">deg</span><span class="p">)</span> <span class="n">scale</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class="line">    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class="line">    <span class="k">top</span><span class="o">:</span> <span class="m">14px</span><span class="p">;</span>
</span><span class="line">    <span class="k">left</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">	<span class="n">transition</span><span class="o">:</span> <span class="n">all</span> <span class="m">.2s</span> <span class="n">cubic</span><span class="o">-</span><span class="n">bezier</span><span class="p">(</span><span class="o">.</span><span class="m">18</span><span class="o">,.</span><span class="m">89</span><span class="o">,.</span><span class="m">32</span><span class="o">,</span><span class="m">1</span><span class="o">.</span><span class="m">28</span><span class="p">)</span> <span class="m">.1s</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c">/********** checkbox_half 基本样式 *************/</span>
</span><span class="line"><span class="nc">.checkbox_half</span> <span class="p">{</span>
</span><span class="line">	<span class="k">background</span><span class="o">:</span> <span class="m">#2db7f5</span><span class="p">;</span>
</span><span class="line">	<span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#2db7f5</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nc">.checkbox_half</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class="line">	<span class="k">height</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line">	<span class="k">top</span><span class="o">:</span> <span class="m">23px</span><span class="p">;</span>
</span><span class="line">	<span class="n">transform</span><span class="o">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
  <p>状态改变后的样式</p>
</blockquote>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="c">/* checkbox 激活样式 */</span>
</span><span class="line"><span class="nc">.checked</span> <span class="nc">.checkbox</span> <span class="p">{</span>
</span><span class="line">	<span class="k">background</span><span class="o">:</span> <span class="m">#2db7f5</span><span class="p">;</span>
</span><span class="line">    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#2db7f5</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.checked</span> <span class="nc">.checkbox</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class="line">	<span class="k">top</span><span class="o">:</span> <span class="m">7px</span><span class="p">;</span>
</span><span class="line">	<span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">45</span><span class="n">deg</span><span class="p">)</span> <span class="n">scale</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c">/********** checkbox_half 激活样式 *************/</span>
</span><span class="line"><span class="c">/* 没有修改背景色的部分哦～ */</span>
</span><span class="line"><span class="nc">.checked</span> <span class="nc">.checkbox_half</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
</span><span class="line">	<span class="k">height</span><span class="o">:</span> <span class="m">24px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
  <p>其余附带的一点样式，非主要，修饰用的</p>
</blockquote>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="c">/* other 修饰类型样式 */</span>
</span><span class="line"><span class="nc">.checkbox_anim</span> <span class="p">{</span>
</span><span class="line">	<span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
</span><span class="line">    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nc">.checkbox-span</span> <span class="p">{</span>
</span><span class="line">    <span class="k">margin</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>其实现在我们就算写完了，加入点 JS 就能够完整的动起来了。这里贴一下，可以拿来跑来看看效果 ^0^ 兼容神马的我不知道。。。不知道。。。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">HTMLElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">HTMLElement</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">on</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">cb</span><span class="p">,</span> <span class="nx">isbb</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="k">this</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">cb</span><span class="p">,</span> <span class="nx">isbb</span> <span class="o">||</span> <span class="kc">false</span><span class="p">);</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">
</span><span class="line">            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">        <span class="nx">HTMLElement</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toggleClass</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cls</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">classList</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="k">this</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">toggle</span><span class="p">(</span><span class="nx">cls</span><span class="p">);</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">
</span><span class="line">            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">select</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">selector</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">CheckBox</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">checked</span><span class="o">:</span> <span class="s1">&#39;checked&#39;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">CheckBoxNormal</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">_self</span><span class="o">:</span> <span class="nx">select</span><span class="p">(</span><span class="s1">&#39;.js_anim_normal&#39;</span><span class="p">),</span>
</span><span class="line">        <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">            <span class="k">this</span><span class="p">.</span><span class="nx">bind</span><span class="p">();</span>
</span><span class="line">        <span class="p">},</span>
</span><span class="line">        <span class="nx">bind</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">            <span class="k">this</span><span class="p">.</span><span class="nx">_self</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleCheckbox</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class="line">        <span class="p">},</span>
</span><span class="line">        <span class="nx">handleCheckbox</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">this</span><span class="p">.</span><span class="nx">_self</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="nx">CheckBox</span><span class="p">.</span><span class="nx">checked</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">CheckBoxHalf</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">_self</span><span class="o">:</span> <span class="nx">select</span><span class="p">(</span><span class="s1">&#39;.js_anim_half&#39;</span><span class="p">),</span>
</span><span class="line">        <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">            <span class="k">this</span><span class="p">.</span><span class="nx">bind</span><span class="p">();</span>
</span><span class="line">        <span class="p">},</span>
</span><span class="line">        <span class="nx">bind</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">            <span class="k">this</span><span class="p">.</span><span class="nx">_self</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleCheckbox</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class="line">        <span class="p">},</span>
</span><span class="line">        <span class="nx">handleCheckbox</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">this</span><span class="p">.</span><span class="nx">_self</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="nx">CheckBox</span><span class="p">.</span><span class="nx">checked</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="nx">CheckBoxNormal</span><span class="p">,</span> <span class="nx">CheckBoxHalf</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">checkbox</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    	<span class="nx">checkbox</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">})(</span><span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostCSS是个什么鬼东西？]]></title>
    <link href="http://fegg.github.io/blog/20151024/postcss-introduce/"/>
    <updated>2015-10-24T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20151024/postcss-introduce</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>最近大漠前辈在群里发关于<code>PostCSS</code>的系列文章，但是耗子姐姐又说看了有点云里雾里的感觉，所以这篇文章将按一个思考的角度来理解一下 PostCSS 到底是一个什么东西。</p>

<p><img src="http://fegg.github.io/images/postcss/top.png" alt="配图" /></p>

<h3 id="section-1">一、提出不懂的地方</h3>

<p>很多时候第一次在网上查询 PostCSS 概念的时候，大家都解释成一个<code>后处理器</code>的概念，其实个人觉得这些概念不重要，更为重要的有以下几点：</p>

<ol>
  <li>它本质上是一个什么东西？</li>
  <li>它能解决我们什么问题？</li>
  <li>它是通过什么方式来解决我们的问题？</li>
  <li>它解决我们的问题是为什么？</li>
  <li>怎么实现与 <code>SASS</code>、<code>LESS</code>、<code>Stylus</code> 相同的功能（因为它们被经常拿来比较）</li>
  <li>它由哪些东西组成？</li>
  <li>既然是程序可以用的，那么它的API呢？</li>
</ol>

<!-- more -->

<hr />

<p>Q: 这个时候，你应该会问：<strong>为什么要将组成和API放到最后呢？</strong></p>

<p>A: 那是因为我们在认识一个不太清楚的东西的时候，第一次肯定是一个直观的认识：它到底有什么用？而不会说，一来就去深入的研究它。不过这里本质还是要先说一下的，先留个印象。</p>

<hr />

<h3 id="section-2">二、个个击破</h3>

<h4 id="section-3">1. 它本质上是一个什么东西？</h4>

<ul>
  <li>PostCSS 可以直观的理解为：它就是一个<code>平台、平台、平台</code>，重要的事情来三遍比较爽，哈哈！</li>
</ul>

<blockquote>
  <p>为什么说它是一个平台呢？因为我们直接用它，感觉不能干什么事情，但是如果让一些插件在它上面跑，那么将会很强大。</p>
</blockquote>

<ul>
  <li>PostCSS 提供了一个解析器，它能够将 CSS 解析成抽象语法树（AST）。</li>
</ul>

<p>上面两条看完后，我们可以理解为下面这个模型。</p>

<p><img src="http://fegg.github.io/images/postcss/process.png" alt="基本模型" /></p>

<p>所以说，PostCSS 它需要一个插件系统才能够发挥作用。我们可以通过“插件”来传递AST，然后再把AST转换成一个串，最后再输出到目标文件中去。当然，这里是有API可以用，这里先不讲，免得晕了。</p>

<h4 id="section-4">2. 它能解决我们什么问题？它是通过什么方式来解决我们的问题？</h4>

<p>上面的图很清晰，但是我还是不知道是个什么东西！所以接下来温和点，直接从代码层面来感官的认识一下。</p>

<ul>
  <li>它能够为 CSS 提供额外的功能；</li>
  <li>通过在 PostCSS 这个<code>平台</code>上，我们能够开发一些插件，来处理我们的CSS，比如热门的：autoprefixer</li>
  <li>我们能够使用JavaScript来开发插件（这点对前端来说很重要）</li>
</ul>

<p>好吧，看到一个熟悉的单词了：autoprefixer，这里我们就让它来当栗子吧，可能更容易理解一点。</p>

<p>首先，我们需要做一些准备，安装好需要的东西。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">// postcss 的命令行工具
</span><span class="line">sudo npm install  -g postcss-cli
</span><span class="line">// autoprefixer 插件
</span><span class="line">sudo npm install -g autoprefixer
</span></code></pre></td></tr></table></div></figure>

<p>第一次用命令行能让你更直观去理解它哈，所以请要有一颗折腾的心。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">// 1. 先看下这个命令有哪些参数可以用
</span><span class="line">postcss --help
</span><span class="line">
</span><span class="line">Usage: /usr/local/bin/postcss -use plugin <span class="o">[</span>--config<span class="p">|</span>-c config.json<span class="o">]</span> <span class="o">[</span>--output<span class="p">|</span>-o
</span><span class="line">output.css<span class="o">]</span> <span class="o">[</span>input.css<span class="o">]</span>
</span><span class="line">
</span><span class="line">选项：
</span><span class="line">	-c, --config       JSON file with plugin configuration
</span><span class="line">	-u, --use          postcss plugin name <span class="o">(</span>can be used multiple <span class="nb">times</span><span class="o">)</span>
</span><span class="line">	-o, --output       Output file <span class="o">(</span>stdout <span class="k">if</span> not provided<span class="o">)</span>
</span><span class="line">	-d, --dir          Output directory
</span><span class="line">	-r, --replace      Replace input file<span class="o">(</span>s<span class="o">)</span> with generated output       <span class="o">[</span>boolean<span class="o">]</span>
</span><span class="line">	-s, --syntax       Alternative input syntax parser
</span><span class="line">	-p, --parser       Alternative CSS parser
</span><span class="line">	-t, --stringifier  Alternative output stringifier
</span><span class="line">	-w, --watch        auto-recompile when detecting <span class="nb">source </span>changes
</span><span class="line">	-v, --version      显示版本号                                        <span class="o">[</span>boolean<span class="o">]</span>
</span><span class="line">	-h, --help         显示帮助信息                                      <span class="o">[</span>boolean<span class="o">]</span>
</span><span class="line">
</span><span class="line">示例：
</span><span class="line">	postcss --use autoprefixer -c             Use autoprefixer as a postcss plugin
</span><span class="line">	options.json -o screen.css screen.css
</span><span class="line">	postcss --use autoprefixer                Pass plugin parameters in
</span><span class="line">	--autoprefixer.browsers <span class="s2">&quot;&gt; 5%&quot;</span> -o         plugin.option notation
</span><span class="line">	screen.css screen.css
</span><span class="line">	postcss -u postcss-cachify -u             Use multiple plugins and multiple
</span><span class="line">	autoprefixer -d build *.css               input files
</span><span class="line">
</span><span class="line">Please specify at least one plugin name.
</span></code></pre></td></tr></table></div></figure>

<p>PS: 我贴出来是方便大家在看的时候不用电脑……^_^</p>

<p>好吧，先看一下文件目录，这里我只说一下比较好写的方式，就是将一些参数配置到配置文件中去。</p>

<p><img src="http://fegg.github.io/images/postcss/menu.png" alt="目录结构" /></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="err">//</span> <span class="err">config.json:</span> <span class="err">所有的配置</span>
</span><span class="line"><span class="err">//</span> <span class="err">p.json:</span> <span class="err">仅有</span> <span class="err">autoprefixer</span> <span class="err">插件的配置</span>
</span><span class="line"><span class="err">//</span> <span class="err">config.json</span> <span class="err">的内容</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="nt">&quot;use&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;autoprefixer&quot;</span><span class="p">],</span>
</span><span class="line">	<span class="nt">&quot;input&quot;</span><span class="p">:</span> <span class="s2">&quot;src/index.css&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="nt">&quot;output&quot;</span><span class="p">:</span> <span class="s2">&quot;index.css&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="nt">&quot;autoprefixer&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">		<span class="nt">&quot;browsers&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt; 5%&quot;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="err">//</span> <span class="err">p.json</span> <span class="err">的内容</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="nt">&quot;autoprefixer&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">		<span class="nt">&quot;browsers&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt; 5%&quot;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>接下来我们在终端里面输入：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">// 最简洁的方式
</span><span class="line">postcss -c config.json
</span><span class="line">// 稍微复杂一点的方式，这里要用 -i 参数，help里面没有，我是从config.json里面的配置猜出来的，官方的那个写法出不来
</span><span class="line">postcss -u autoprefixer -c p.json -i src/index.css -o index.css
</span><span class="line">// 最复杂的方式
</span><span class="line">// 还是不写比较好。。。
</span></code></pre></td></tr></table></div></figure>

<p>跟平时想到的效果一样：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="o">//</span> <span class="nt">src</span><span class="o">/</span><span class="nt">index</span><span class="nc">.css</span> <span class="err">中的源码</span>
</span><span class="line"><span class="o">*</span> <span class="p">{</span>
</span><span class="line">	<span class="n">transition</span><span class="o">:</span> <span class="n">all</span> <span class="m">.1s</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="o">//</span> <span class="err">转换过后的代码</span> <span class="nt">index</span><span class="nc">.css</span>
</span><span class="line"><span class="o">*</span> <span class="p">{</span>
</span><span class="line">	<span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="n">all</span> <span class="m">.1s</span><span class="p">;</span>
</span><span class="line">		<span class="n">transition</span><span class="o">:</span> <span class="n">all</span> <span class="m">.1s</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>好吧，现在肯定就对 PostCSS 有一个感官的认识了，接下来就是需要自己动手去用一下 <code>cssnext</code> 这个插件了～看会发生什么，这里就不写了，也挺好用的，不过应该还是草案状态。</p>

<hr />

<p>我们开发不可能用命令行吧，所以这里再接着介绍代码编写，然后用 node 去执行文件的方式。直接上代码吧。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">// 1. 先安装一下需要的库
</span><span class="line">npm install postcss --save-dev
</span><span class="line">npm install autoprefixer --save-dev
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 2. 其实应该先看看 postcss 的 package.json 文件，来看看包含了些什么，留个印象</span>
</span><span class="line"><span class="c1">// 3. p.js 中的代码</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">postcss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;postcss&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">autoprefixer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;autoprefixer&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">css</span> <span class="o">=</span> <span class="s1">&#39;* { transition: all .1s; }&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">postcss</span><span class="p">([</span><span class="nx">autoprefixer</span><span class="p">]).</span><span class="nx">process</span><span class="p">(</span><span class="nx">css</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// 这一行是学习的时候需要的，看一下到底对象里面包含什么</span>
</span><span class="line">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="s1">&#39;index.css&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">map</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="s1">&#39;index.css.map&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">map</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">// 4. 执行 p.js
</span><span class="line">node p
</span></code></pre></td></tr></table></div></figure>

<p>好吧，最后的结果和之前用命令行的方式一样，只不过过程不同。这样下来应该对 PostCSS 有了更多的感觉了吧。还没完，不用慌～我们还需要提出一个问题，我都有 <code>SASS</code> 等预处理器了，还拿它来不是又给前端届添乱么？因为这2年东西确实太多了～</p>

<blockquote>
  <p>记住一句话：存在即合理</p>
</blockquote>

<p>既然合理，那么我们就看看它有什么优势呗～</p>

<h4 id="section-5">3. 它解决我们的问题是为什么？优势何在？</h4>

<p>比如，我们用 SASS 来处理 box-shadow 的前缀，我们需要这样写：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="c">/* CSS3 box-shadow */</span>
</span><span class="line"><span class="k">@mixin</span> <span class="nt">box-shadow</span><span class="o">($</span><span class="nt">top</span><span class="o">,</span> <span class="o">$</span><span class="nt">left</span><span class="o">,</span> <span class="o">$</span><span class="nt">blur</span><span class="o">,</span> <span class="o">$</span><span class="nt">size</span><span class="o">,</span> <span class="o">$</span><span class="nt">color</span><span class="o">,</span> <span class="o">$</span><span class="nt">inset</span><span class="o">:</span> <span class="nt">false</span><span class="o">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">@if</span> <span class="o">$</span><span class="nt">inset</span> <span class="p">{</span>
</span><span class="line">		<span class="nt">-webkit-box-shadow</span><span class="o">:</span> <span class="nt">inset</span> <span class="o">$</span><span class="nt">top</span> <span class="o">$</span><span class="nt">left</span> <span class="o">$</span><span class="nt">blur</span> <span class="o">$</span><span class="nt">size</span> <span class="o">$</span><span class="nt">color</span><span class="o">;</span>
</span><span class="line">		<span class="nt">box-shadow</span><span class="o">:</span> <span class="nt">inset</span> <span class="o">$</span><span class="nt">top</span> <span class="o">$</span><span class="nt">left</span> <span class="o">$</span><span class="nt">blur</span> <span class="o">$</span><span class="nt">size</span> <span class="o">$</span><span class="nt">color</span><span class="o">;</span>
</span><span class="line">	<span class="p">}</span> <span class="k">@else</span> <span class="p">{</span>
</span><span class="line">		<span class="nt">-webkit-box-shadow</span><span class="o">:</span> <span class="o">$</span><span class="nt">top</span> <span class="o">$</span><span class="nt">left</span> <span class="o">$</span><span class="nt">blur</span> <span class="o">$</span><span class="nt">size</span> <span class="o">$</span><span class="nt">color</span><span class="o">;</span>
</span><span class="line">		<span class="nt">box-shadow</span><span class="o">:</span> <span class="o">$</span><span class="nt">top</span> <span class="o">$</span><span class="nt">left</span> <span class="o">$</span><span class="nt">blur</span> <span class="o">$</span><span class="nt">size</span> <span class="o">$</span><span class="nt">color</span><span class="o">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>使用 PostCSS 我们只需要按标准的 CSS 来写就行了，因为最后 autoprefixer 会帮我们做添加这个事情～</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nt">box-shadow</span><span class="o">:</span> <span class="nt">0</span> <span class="nt">0</span> <span class="nt">3px</span> <span class="nt">5px</span> <span class="nt">rgba</span><span class="o">(</span><span class="nt">222</span><span class="o">,</span> <span class="nt">222</span><span class="o">,</span> <span class="nt">222</span><span class="o">,</span> <span class="nc">.3</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>所以，这里就出现了一个经常大家说的未来编码的问题。实际上，PostCSS 改变的是一种开发模式。</p>

<ul>
  <li>SASS等工具：源代码 -&gt; 生产环境 CSS</li>
  <li>PostCSS：源代码 -&gt; 标准 CSS -&gt; 生产环境 CSS</li>
</ul>

<p>这样能体会出优势吧，但是目前大家都是 SASS + PostCSS 这样的开发模式，其实我认为是不错的，取长补短嘛，当然，在 PostCSS 平台上都是可以做到的，只是目前这个过渡期，这样更好，更工程化。接下来我就介绍一些方法来纯粹是用 PostCSS。</p>

<h4 id="sasslessstylus-">4. 怎么实现与 SASS、LESS、Stylus 相同的功能</h4>

<p>其实这一节我都不需要写了～列一下插件就行了，因为插件才是实现，PostCSS 只是提供了一个平台。</p>

<p>其实可以去官方看看：<a href="https://github.com/postcss/postcss">插件系统</a>
这里列几个便于理解的插件</p>

<ul>
  <li>postcss-each</li>
  <li>postcss-for</li>
  <li>postcss-mixins</li>
  <li>postcss-extend</li>
</ul>

<p>从名字就能看出来了吧～应该很好理解。</p>

<h4 id="section-6">5. 它由哪些东西组成？</h4>

<p>其实从官方介绍来看，只包含以下内容：</p>

<ol>
  <li>CSS Parser</li>
  <li>CSS 节点树 API</li>
  <li>source map 生成器</li>
  <li>生成节点树串</li>
</ol>

<p>英文不太好 ＝＝ ，就这 4 部分吧，从第一个图其实也能够看出来。</p>

<p>其中的 I/O 体现在什么地方呢？好吧，很容易想到，主要体现在：</p>

<ul>
  <li>Input: <strong>插件程式</strong>和<strong>CSS Parser</strong></li>
  <li>Output: <strong>生成节点树串</strong></li>
</ul>

<p>CSS Parser 可以理解为一个内部过程，而插件程式主要体现在：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">postcss</span><span class="p">([</span> <span class="nx">autoprefixer</span> <span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

<p>最后生成的节点树串体现在：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">postcss</span><span class="p">().</span><span class="nx">process</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">// 就是这里了</span>
</span><span class="line">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="c1">// 现在我贴一下上面 result 对象的一个输出结果</span>
</span><span class="line"><span class="c1">// 这里我多引入了一个 cssnano 插件</span>
</span><span class="line"><span class="c1">// 改变的代码就这点，为了更全的看 result</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">from</span><span class="o">:</span> <span class="s1">&#39;src/index.css&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="nx">to</span><span class="o">:</span> <span class="s1">&#39;index.css&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="c1">// 配置 map</span>
</span><span class="line">	<span class="nx">map</span><span class="o">:</span> <span class="p">{</span> <span class="nx">inline</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">postcss</span><span class="p">([</span> <span class="nx">autoprefixer</span><span class="p">,</span> <span class="nx">cssnano</span><span class="p">()</span> <span class="p">]).</span><span class="nx">process</span><span class="p">(</span><span class="nx">css</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">Result</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">processor</span><span class="o">:</span> <span class="nx">Processor</span> <span class="p">{</span>
</span><span class="line">		<span class="c1">// 处理器的版本号</span>
</span><span class="line">		<span class="nx">version</span><span class="o">:</span> <span class="s1">&#39;5.0.10&#39;</span><span class="p">,</span>
</span><span class="line">		<span class="c1">// 加载的一堆插件</span>
</span><span class="line">		<span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class="line">			<span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span>
</span><span class="line">			<span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span>
</span><span class="line">			<span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span>
</span><span class="line">			<span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span>
</span><span class="line">			<span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span>
</span><span class="line">			<span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="p">[</span><span class="nb">Object</span><span class="p">]</span>
</span><span class="line">		<span class="p">]</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">messages</span><span class="o">:</span> <span class="p">[],</span>
</span><span class="line">	<span class="nx">root</span><span class="o">:</span> <span class="nx">Root</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">raws</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">semicolon</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">			<span class="nx">after</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class="line">		<span class="p">},</span>
</span><span class="line">		<span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span>
</span><span class="line">		<span class="nx">nodes</span><span class="o">:</span> <span class="p">[</span>
</span><span class="line">			<span class="p">[</span><span class="nb">Object</span><span class="p">]</span>
</span><span class="line">		<span class="p">],</span>
</span><span class="line">		<span class="nx">source</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">input</span><span class="o">:</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span>
</span><span class="line">			<span class="nx">start</span><span class="o">:</span> <span class="p">[</span><span class="nb">Object</span><span class="p">]</span>
</span><span class="line">		<span class="p">},</span>
</span><span class="line">		<span class="nx">_autoprefixerDisabled</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">		<span class="nx">_autoprefixerPrefix</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">		<span class="nx">rawCache</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">colon</span><span class="o">:</span> <span class="s1">&#39;:&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">indent</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">beforeDecl</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">beforeRule</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">beforeOpen</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">beforeClose</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">beforeComment</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">after</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">emptyBody</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">commentLeft</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">commentRight</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="c1">// 我们代码中配置 opts 变量</span>
</span><span class="line">	<span class="nx">opts</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">from</span><span class="o">:</span> <span class="s1">&#39;src/index.css&#39;</span><span class="p">,</span>
</span><span class="line">		<span class="nx">to</span><span class="o">:</span> <span class="s1">&#39;index.css&#39;</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="c1">// 这就是重新生成的 节点树串</span>
</span><span class="line">	<span class="c1">// 这里有自动补全和高效压缩的效果</span>
</span><span class="line">	<span class="nx">css</span><span class="o">:</span> <span class="s1">&#39;*{-webkit-transition:all .1s;transition:all .1s}&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="c1">// map的文件的配置</span>
</span><span class="line">	<span class="nx">map</span><span class="o">:</span>
</span><span class="line">		<span class="nx">SourceMapGenerator</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">_file</span><span class="o">:</span> <span class="s1">&#39;index.css&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">_sourceRoot</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class="line">			<span class="nx">_skipValidation</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">			<span class="nx">_sources</span><span class="o">:</span> <span class="nx">ArraySet</span> <span class="p">{</span> <span class="nx">_array</span><span class="o">:</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="nx">_set</span><span class="o">:</span> <span class="p">[</span><span class="nb">Object</span><span class="p">]</span> <span class="p">},</span>
</span><span class="line">			<span class="nx">_names</span><span class="o">:</span> <span class="nx">ArraySet</span> <span class="p">{</span> <span class="nx">_array</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">_set</span><span class="o">:</span> <span class="p">{}</span> <span class="p">},</span>
</span><span class="line">			<span class="nx">_mappings</span><span class="o">:</span> <span class="nx">MappingList</span> <span class="p">{</span> <span class="nx">_array</span><span class="o">:</span> <span class="p">[</span><span class="nb">Object</span><span class="p">],</span> <span class="nx">_sorted</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">_last</span><span class="o">:</span> <span class="p">[</span><span class="nb">Object</span><span class="p">]</span> <span class="p">},</span>
</span><span class="line">			<span class="nx">_sourcesContents</span><span class="o">:</span> <span class="p">{</span> <span class="s1">&#39;$src/index.css&#39;</span><span class="o">:</span> <span class="s1">&#39;* { transition: all .1s; }&#39;</span> <span class="p">}</span> <span class="p">},</span>
</span><span class="line">	<span class="c1">// 这里应该是链式要用的吧，暂时不深究</span>
</span><span class="line">	<span class="nx">lastPlugin</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">		<span class="p">[</span><span class="nb">Function</span><span class="p">]</span>
</span><span class="line">		<span class="nx">postcssPlugin</span><span class="o">:</span> <span class="s1">&#39;cssnano-reset-stylecache&#39;</span><span class="p">,</span>
</span><span class="line">			<span class="nx">postcssVersion</span><span class="o">:</span> <span class="s1">&#39;5.0.10&#39;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>其实吧，这样有点抽象的，还是来看熟悉的 API 吧。</p>

<p>这里出现了 sourcemap，说明 PostCSS 中的转换功能是它必备的，但是必备并不等于：<strong>源代码与目标代码不能完全一致</strong>。</p>

<p>这里吐槽一下 Chrome 的 sourcemap 功能，一坨屎！下面看看 firefox 里面的效果吧。</p>

<p><img src="http://fegg.github.io/images/postcss/sourcemap.png" alt="SourceMap的效果" /></p>

<p>这里 firefox 里面就自动映射了<strong>源文件</strong>，非常不错！</p>

<h4 id="api">6. 既然是程序可以用的，那么它的API呢？</h4>

<p>其实官方有 API 的详细解释，我看了一下，一看就明白了，就不再花时间介绍了，大家可以去看看，这样会知道，原来如此～</p>

<p>PS: 大家可以先看看 Node Common 和 Node相关的，然后再看 plugin</p>

<p><a href="https://github.com/postcss/postcss/blob/master/docs/api.md">官方API</a></p>

<p>这里看一个 DEMO，主要做 rem 和 px 单位之间的互换，加入 processors 就可以用了，很方便：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">custom</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">css</span><span class="p">,</span> <span class="nx">opts</span><span class="p">){</span>
</span><span class="line">	<span class="nx">css</span><span class="p">.</span><span class="nx">eachDecl</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">decl</span><span class="p">){</span>
</span><span class="line">		<span class="nx">decl</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">decl</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\d+rem/</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">){</span>
</span><span class="line">			<span class="k">return</span> <span class="mi">16</span> <span class="o">*</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;px&quot;</span><span class="p">;</span>
</span><span class="line">		<span class="p">});</span>
</span><span class="line">	<span class="p">});</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>开发插件可以看一下 <a href="https://github.com/postcss/postcss/blob/master/docs/guidelines/plugin.md">官方插件指南</a></p>

<p>更细致的地方，之后有时间的时候再写写 ^_^ 一说技术就停不下来了～</p>

<p>大家在问？我怎么在工程上应用它呢？好吧，使用 gulp, grunt, webpack 都是可以的，我觉得都理解了 PostCSS ，使用这些就很简单了，一查资料，拷贝一份配置就可以开始用了～就这样吧，下次再结合 react 来介绍一下一个叫: postcss-js 的插件，看上去还不错，还没深入用，用到的时候再分享吧。</p>

<p>其实我也是初学者，只是用了自己的学习方法来梳理成文章，下面都是我看过的文章，部分是引用的。这里就不全部举例了，看的文章有点多。。。</p>

<h4 id="section-7">7. 参考的文章</h4>

<ul>
  <li>最权威的初认识</li>
</ul>

<p><a href="https://github.com/postcss/postcss">https://github.com/postcss/postcss</a></p>

<ul>
  <li>一个不错的东西 rework</li>
</ul>

<p><a href="https://github.com/reworkcss">https://github.com/reworkcss</a></p>

<ul>
  <li>理解 AST 等插件解析技术</li>
</ul>

<p><a href="http://rapheal.sinaapp.com/category/js/uglify%E6%BA%90%E7%A0%81/">http://rapheal.sinaapp.com/category/js/uglify%E6%BA%90%E7%A0%81/</a></p>

<ul>
  <li>大漠的系列文章，应用型很强，推荐</li>
</ul>

<p><a href="http://www.w3cplus.com/blog/tags/517.html">http://www.w3cplus.com/blog/tags/517.html</a></p>

<ul>
  <li>一个年龄差不多的开发者的解释</li>
</ul>

<p><a href="http://acgtofe.com/posts/2015/05/modular-transforming-with-postcss/">http://acgtofe.com/posts/2015/05/modular-transforming-with-postcss/</a></p>

<ul>
  <li>一篇稍微理论化解释的文章</li>
</ul>

<p><a href="http://www.oschina.net/translate/its-time-for-everyone-to-learn-about-postcss?cmp">http://www.oschina.net/translate/its-time-for-everyone-to-learn-about-postcss?cmp</a></p>

<ul>
  <li>一个开发模式简单的优劣比较</li>
</ul>

<p><a href="http://caibaojian.com/css-processor.html">http://caibaojian.com/css-processor.html</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React 组件开发入门]]></title>
    <link href="http://fegg.github.io/blog/20150726/induction-react-component-dev/"/>
    <updated>2015-07-26T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20150726/induction-react-component-dev</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>熟悉 React 的思想后，我们先来尝试开发一个单纯的小组件，可以对比一下是不是比以前的开发模式更加舒适了，这里我主要以一个 Loadding 组件来举栗子，实现了几个基本的功能：</p>

<ul>
  <li>一种类型的 loadding（菊花转）</li>
  <li>能够设置 loadding 的三个属性：width height color</li>
  <li>能够控制 loadding 的显示和隐藏</li>
</ul>

<p>其实对于一个简单需求来说，这三个属性已经很实用了。但是去网上看一些外国大神写的组件，有一些不明白的地方，所以自己就慢慢搞，do it！</p>

<h3 id="section-1">设计</h3>

<p>我想这样用 loadding 组件：</p>

<p><img src="http://fegg.github.io/images/react/code-loadding.png" alt="使用代码" /></p>

<!-- more -->

<p>所以我定义这个组件的基本结构如下：</p>

<pre><code>var Loadding = React.createClass({
	// 控制组件属性的类型
	propTypes: {},
	// 控制组件属性的默认值
	getDefaultProps: function () {},
	// 组装基本的内联样式
	getComponentStyle: function () {},
	// 渲染基本的组件，拆分 render 方法的粒度
	renderBaseComp: function () {},
	// 最终的渲染方法
	render: function () {}
});
</code></pre>

<p>这个组件中，我使用的 内联样式 来控制组件的内部基本样式的稳定。其实有时候我们会觉得内联样式不好，但是我个人觉得每一种设置 CSS 形式的方法，用在合适的场景中就是正确的。</p>

<p>每部分的具体实现如下，代码中有一些讲解（这里我不会介绍具体 loadding 效果是怎么出来的，看代码应该就会明白，主要介绍一个 react 制作简单组件的思路和写法）对于扩展性来说，</p>

<blockquote>
  <p>你还可以加入 className 和 type 这些修饰性的属性，但是我更倾向于迭代式的组件开发，小组件就要具有良好的封闭性，使用接口简单，大组件才考虑更好的鲁棒性和可扩展性，这样开发一个组件的性价比才高。需要注意对 getDefaultProps 的理解，只有当使用接口的人代码中根本没有写那个属性的时候，才会使用定义的默认值。</p>
</blockquote>

<h3 id="section-2">实现</h3>

<pre><code>var Loadding = React.createClass({
	propTypes: {
		width: React.PropTypes.oneOfType([
			React.PropTypes.number,
			React.PropTypes.string
		]),
		height: React.PropTypes.oneOfType([
			React.PropTypes.number,
			React.PropTypes.string
		]),
		color: React.PropTypes.string,
		active: React.PropTypes.bool
	},
	getDefaultProps: function() {
		return {
			color: '#00be9c',
			height: 30,
			width: 30,
			active: false
		};
	},

	getComponentStyle: function() {
		var width = this.props.width,
			height = this.props.height,
			color = this.props.color;
		/* 中间圆心 */
		var cWidth = 0.4 * width,
			cHeight = 0.4 * height,
			cMarginLeft = -0.5 * cWidth,
			cMarginTop = -0.5 * cHeight;

		/* 基本样式 */
		return {
			loaddingStyle: { // loadding 容器
				width: width,
				height: height
			},
			lineStyle: { // loadding 元件样式
				background: color
			},
			centerStyle: { // loadding 圆心样式
				width: cWidth,
				height: cHeight,
				marginLeft: cMarginLeft,
				marginTop: cMarginTop
			}
		};
	},

	renderBaseComp: function(compStyle) {
		/* 生成动画元件 */
		var n = 4; // 元件个数，todo: 定制个数
		var lines = []; // 元件元素集合
		for (var i = 0; i &lt; n; i++) {
			lines.push(
				&lt;div className="line"&gt;
					&lt;span className="top" style={ compStyle.lineStyle }&gt;&lt;/span&gt;
					&lt;span className="bottom" style={ compStyle.lineStyle }&gt;&lt;/span&gt;
				&lt;/div&gt;
			);
		}
		return lines;
	},

	render: function() {
		/* 生成组件自己的样式 */
		var compStyle = this.getComponentStyle();
		/* 模拟渲染基本动画元件 */
		var lines = this.renderBaseComp(compStyle);

		// loadding 的class，控制交互
		var loaddingClasses = cx({
			loadding: true,
			active: this.props.active
		});

		return (
			&lt;div className={ loaddingClasses } style={ compStyle.loaddingStyle }&gt;
				{lines}
				&lt;div className="loadding-center" style={ compStyle.centerStyle }&gt;&lt;/div&gt;
			&lt;/div&gt;

		);
	}

});
</code></pre>

<p>最后，下面是基本的 SASS（不考虑不支持的情况，不支持都不用开发，直接用图，性价比更高）</p>

<pre><code>@include keyframes(load) {
	0% {
		opacity: 0;
	}
	25% {
		opacity: .25;
	}
	50% {
		opacity: .5;
	}
	75% {
		opacity: .75;
	}
	100% {
		opacity: 1;
	}
}

.loadding {
	display: none;
	position: absolute;
	&amp;.active {
		display: block;
	}
	.loadding-center {
		position: absolute;
		left: 0;
		top: 50%;
		background: #fff;
		border-radius: 50%;
	}
	.line {
		position: absolute;
		top: 0;
		left: 0;
		height: 100%;
		.top {
			content: '';
			display: block;
			width: 1px;
			font-size: 0;
			height: 50%;
		}
		.bottom {
			@extend .top;
		}
		@for $i from 1 through 4 {
			&amp;:nth-child(#{$i}) {
				transform:rotate(45deg * ($i - 1));
				.top {
					@include animation(load, 0.8s, linear, 0s, infinite);
				}
				.bottom {
					@include animation(load, 0.8s, linear, 0.4s + $i/10, infinite);
				}
			}
		}
	}
}
</code></pre>

<p>里面用到的一个 animation 混淆方法：</p>

<pre><code>@mixin keyframes($name) {
	@-webkit-keyframes #{$name} {
		@content;
	}
	@-moz-keyframes #{$name} {
		@content;
	}
	@-ms-keyframes #{$name} {
		@content;
	}
	@keyframes #{$name} {
		@content;
	}
}

@mixin animation ($name, $duration, $func, $delay, $count, $direction: normal) {
	-webkit-animation: $name $duration $func $delay $count $direction;
	-moz-animation: $name $duration $func $delay $count $direction;
	-o-animation: $name $duration $func $delay $count $direction;
	animation: $name $duration $func $delay $count $direction;
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React 组件之间如何交流]]></title>
    <link href="http://fegg.github.io/blog/20150719/react-component-communicate/"/>
    <updated>2015-07-19T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20150719/react-component-communicate</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>今天群里面有很多都在问关于 React 组件之间是如何通信的问题，之前自己写的时候也遇到过这类问题。下面是我看到的一篇不错英文版的翻译，看过我博客的人都知道，我翻译可能不会按部就班，会尽可能用中文的意思，来将作者要讲述的技术描述清楚。英文能力有限，如果有不对的地方请跟我留言，一定修改……^_^</p>

<h3 id="section-1">原著序</h3>

<p>处理 React 组件之间的交流方式，主要取决于组件之间的关系，然而这些关系的约定人就是你。</p>

<p>我不会讲太多关于 data-stores、data-adapters 或者 data-helpers 之类的话题。我下面只专注于 React 组件本身的交流方式的讲解。</p>

<p>React 组件之间交流的方式，可以分为以下 3 种：</p>

<ul>
  <li>【父组件】向【子组件】传值；</li>
  <li>【子组件】向【父组件】传值；</li>
  <li>没有任何嵌套关系的组件之间传值（PS：比如：兄弟组件之间传值）</li>
</ul>

<!-- more -->

<h3 id="section-2">一、【父组件】向【子组件】传值</h3>

<blockquote>
  <p>初步使用</p>
</blockquote>

<p>这个是相当容易的，在使用 React 开发的过程中经常会使用到，主要是利用 props 来进行交流。例子如下：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 父组件</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">MyContainer</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">checked</span><span class="o">:</span> <span class="kc">true</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">(</span>
</span><span class="line">			<span class="o">&lt;</span><span class="nx">ToggleButton</span> <span class="nx">text</span><span class="o">=</span><span class="s2">&quot;Toggle me&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">checked</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class="line">		<span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 子组件</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">ToggleButton</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="c1">// 从【父组件】获取的值</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">checked</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">checked</span><span class="p">,</span>
</span><span class="line">				<span class="nx">text</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">		<span class="k">return</span> <span class="p">(</span>
</span><span class="line">				<span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">text</span><span class="p">}</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;checkbox&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="p">{</span><span class="nx">checked</span><span class="p">}</span> <span class="o">/&gt;&lt;</span><span class="err">/label&gt;</span>
</span><span class="line">		<span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
  <p>进一步讨论</p>
</blockquote>

<p>如果组件嵌套层次太深，那么从外到内组件的交流成本就变得很高，通过 props 传递值的优势就不那么明显了。（PS：所以我建议尽可能的减少组件的层次，就像写 HTML 一样，简单清晰的结构更惹人爱）</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 父组件</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">MyContainer</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">(</span>
</span><span class="line">			<span class="o">&lt;</span><span class="nx">Intermediate</span> <span class="nx">text</span><span class="o">=</span><span class="s2">&quot;where is my son?&quot;</span> <span class="o">/&gt;</span>
</span><span class="line">		<span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 子组件1：中间嵌套的组件</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">Intermediate</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">(</span>
</span><span class="line">			<span class="o">&lt;</span><span class="nx">Child</span> <span class="nx">text</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class="line">		<span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 子组件2：子组件1的子组件</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">Child</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">(</span>
</span><span class="line">			<span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class="line">		<span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="section-3">二、【子组件】向【父组件】传值</h3>

<p>接下来，我们介绍【子组件】控制自己的 state 然后告诉【父组件】的点击状态，然后在【父组件】中展示出来。因此，我们添加一个 change 事件来做交互。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 父组件</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">MyContainer</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">checked</span><span class="o">:</span> <span class="kc">false</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">onChildChanged</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">newState</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class="line">			<span class="nx">checked</span><span class="o">:</span> <span class="nx">newState</span>
</span><span class="line">		<span class="p">});</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">isChecked</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">checked</span> <span class="o">?</span> <span class="s1">&#39;yes&#39;</span> <span class="o">:</span> <span class="s1">&#39;no&#39;</span><span class="p">;</span>
</span><span class="line">		<span class="k">return</span> <span class="p">(</span>
</span><span class="line">			<span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class="line">				<span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Are</span> <span class="nx">you</span> <span class="nx">checked</span><span class="o">:</span> <span class="p">{</span><span class="nx">isChecked</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">				<span class="o">&lt;</span><span class="nx">ToggleButton</span> <span class="nx">text</span><span class="o">=</span><span class="s2">&quot;Toggle me&quot;</span>
</span><span class="line">					<span class="nx">initialChecked</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">checked</span><span class="p">}</span>
</span><span class="line">					<span class="nx">callbackParent</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChildChanged</span><span class="p">}</span>
</span><span class="line">					<span class="o">/&gt;</span>
</span><span class="line">			<span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">		<span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 子组件</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">ToggleButton</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">checked</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialChecked</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">onTextChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">newState</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">checked</span><span class="p">;</span>
</span><span class="line">		<span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class="line">			<span class="nx">checked</span><span class="o">:</span> <span class="nx">newState</span>
</span><span class="line">		<span class="p">});</span>
</span><span class="line">		<span class="c1">// 这里要注意：setState 是一个异步方法，所以需要操作缓存的当前值</span>
</span><span class="line">		<span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">callbackParent</span><span class="p">(</span><span class="nx">newState</span><span class="p">);</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="c1">// 从【父组件】获取的值</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="p">;</span>
</span><span class="line">		<span class="c1">// 组件自身的状态数据</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">checked</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">checked</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">		<span class="k">return</span> <span class="p">(</span>
</span><span class="line">				<span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">text</span><span class="p">}</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;checkbox&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="p">{</span><span class="nx">checked</span><span class="p">}</span> 				<span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onTextChange</span><span class="p">}</span> <span class="o">/&gt;&lt;</span><span class="err">/label&gt;</span>
</span><span class="line">		<span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p><img src="http://fegg.github.io/images/react/demo3.gif" alt="运行效果" /></p>

<p>我觉得原文作者用代码不是很直观，接下来我话一个流程走向简图来直观描述一下这个过程：</p>

<p><img src="http://fegg.github.io/images/react/comp-child-to-parent.png" alt="流程简图" /></p>

<blockquote>
  <p>这样做其实是依赖 props 来传递事件的引用，并通过回调的方式来实现的，这样实现不是特别好，但是在没有任何工具的情况下也是一种简单的实现方式</p>
</blockquote>

<p>这里会出现一个我们在之前讨论的问题，就是组件有多层嵌套的情况下，你必须要一次传入回调函数给 props 来实现子组件向父组件传值或者操作。</p>

<h3 id="tiny-tip-react-event-system">Tiny-Tip: React Event System</h3>

<p>在 onChange 事件或者其他 React 事件中，你能够获取以下东西：</p>

<ul>
  <li>【this】：指向你的组件</li>
  <li>【一个参数】：这个参数是一个 <a href="http://wiki.jikexueyuan.com/project/react/event-system.html">React 合成事件</a>，SyntheticEvent。</li>
</ul>

<p>React 对所有事件的管理都是自己实现的，与我们之前使用的 onclick、onchange 事件不一样。从根本上来说，他们都是绑定到 body 上。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">document</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="s1">&#39;input[data-reactid=&quot;.0.2&quot;]&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{...});</span>
</span></code></pre></td></tr></table></div></figure>

<p>上面这份代码不是来自于 React，只是打一个比方而已。</p>

<p>如果我没有猜错的话，React 真正处理一个事件的代码如下：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">listenTo</span> <span class="o">=</span> <span class="nx">ReactBrowserEventEmitter</span><span class="p">.</span><span class="nx">listenTo</span><span class="p">;</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">putListener</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">registrationName</span><span class="p">,</span> <span class="nx">listener</span><span class="p">,</span> <span class="nx">transaction</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="p">...</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nx">ReactMount</span><span class="p">.</span><span class="nx">findReactContainerForID</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="nx">container</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="nx">ELEMENT_NODE_TYPE</span> <span class="o">?</span> <span class="nx">container</span><span class="p">.</span><span class="nx">ownerDocument</span> <span class="o">:</span> <span class="nx">container</span><span class="p">;</span>
</span><span class="line">		<span class="nx">listenTo</span><span class="p">(</span><span class="nx">registrationName</span><span class="p">,</span> <span class="nx">doc</span><span class="p">);</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">// 在监听事件的内部，我们能发现如下：</span>
</span><span class="line"><span class="nx">target</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventType</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>这里有所有 React 支持的事件：<a href="http://reactjs.cn/react/docs/events.html">中文文档-事件系统</a></p>

<blockquote>
  <p>多个子组件使用同一个回调的情况</p>
</blockquote>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 父组件</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">MyContainer</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">totalChecked</span><span class="o">:</span> <span class="mi">0</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">onChildChanged</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">newState</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">newToral</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">totalChecked</span>
</span><span class="line">			<span class="o">+</span> <span class="p">(</span><span class="nx">newState</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">		<span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class="line">			<span class="nx">totalChecked</span><span class="o">:</span> <span class="nx">newToral</span>
</span><span class="line">		<span class="p">});</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">totalChecked</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">totalChecked</span><span class="p">;</span>
</span><span class="line">		<span class="k">return</span> <span class="p">(</span>
</span><span class="line">			<span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class="line">				<span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">How</span> <span class="nx">many</span> <span class="nx">are</span> <span class="nx">checked</span><span class="o">:</span> <span class="p">{</span><span class="nx">totalChecked</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">				<span class="o">&lt;</span><span class="nx">ToggleButton</span> <span class="nx">text</span><span class="o">=</span><span class="s2">&quot;Toggle me&quot;</span>
</span><span class="line">					<span class="nx">initialChecked</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">checked</span><span class="p">}</span>
</span><span class="line">					<span class="nx">callbackParent</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChildChanged</span><span class="p">}</span>
</span><span class="line">					<span class="o">/&gt;</span>
</span><span class="line">				<span class="o">&lt;</span><span class="nx">ToggleButton</span> <span class="nx">text</span><span class="o">=</span><span class="s2">&quot;Toggle me too&quot;</span>
</span><span class="line">						<span class="nx">initialChecked</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">checked</span><span class="p">}</span>
</span><span class="line">						<span class="nx">callbackParent</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChildChanged</span><span class="p">}</span>
</span><span class="line">						<span class="o">/&gt;</span>
</span><span class="line">					<span class="o">&lt;</span><span class="nx">ToggleButton</span> <span class="nx">text</span><span class="o">=</span><span class="s2">&quot;And me&quot;</span>
</span><span class="line">						<span class="nx">initialChecked</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">checked</span><span class="p">}</span>
</span><span class="line">						<span class="nx">callbackParent</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChildChanged</span><span class="p">}</span>
</span><span class="line">						<span class="o">/&gt;</span>
</span><span class="line">			<span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">		<span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 子组件</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">ToggleButton</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">checked</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialChecked</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">onTextChange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">newState</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">checked</span><span class="p">;</span>
</span><span class="line">		<span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class="line">			<span class="nx">checked</span><span class="o">:</span> <span class="nx">newState</span>
</span><span class="line">		<span class="p">});</span>
</span><span class="line">		<span class="c1">// 这里要注意：setState 是一个异步方法，所以需要操作缓存的当前值</span>
</span><span class="line">		<span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">callbackParent</span><span class="p">(</span><span class="nx">newState</span><span class="p">);</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="c1">// 从【父组件】获取的值</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="p">;</span>
</span><span class="line">		<span class="c1">// 组件自身的状态数据</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">checked</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">checked</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">		<span class="k">return</span> <span class="p">(</span>
</span><span class="line">				<span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">text</span><span class="p">}</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;checkbox&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="p">{</span><span class="nx">checked</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onTextChange</span><span class="p">}</span> <span class="o">/&gt;&lt;</span><span class="err">/label&gt;</span>
</span><span class="line">		<span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p><img src="http://fegg.github.io/images/react/demo4.gif" alt="运行结果" /></p>

<p>这是非常容易理解的，在父组件中我们增加了一个【totalChecked】来替代之前例子中的【checked】，当子组件改变的时候，使用同一个子组件的回调函数给父组件返回值。</p>

<h3 id="section-4">三、没有任何嵌套关系的组件之间传值</h3>

<p>如果组件之间没有任何关系，组件嵌套层次比较深（个人认为 2 层以上已经算深了），或者你为了一些组件能够订阅、写入一些信号，不想让组件之间插入一个组件，让两个组件处于独立的关系。对于事件系统，这里有 2 个基本操作步骤：订阅（subscribe）/监听（listen）一个事件通知，并发送（send）/触发（trigger）/发布（publish）/发送（dispatch）一个事件通知那些想要的组件。</p>

<p>下面讲介绍 3 种模式来处理事件，你能<a href="https://github.com/millermedeiros/js-signals/wiki/Comparison-between-different-Observer-Pattern-implementations">点击这里</a>来比较一下它们。</p>

<p>简单总结一下：</p>

<p>(1) Event Emitter/Target/Dispatcher</p>

<p>特点：需要一个指定的订阅源</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// to subscribe</span>
</span><span class="line"><span class="nx">otherObject</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="err">‘</span><span class="nx">click</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="err">‘</span><span class="nx">click</span><span class="o">!</span><span class="err">’</span><span class="p">);</span> <span class="p">});</span>
</span><span class="line"><span class="c1">// to dispatch</span>
</span><span class="line"><span class="k">this</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="err">‘</span><span class="nx">click</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>(2) Publish / Subscribe</p>

<p>特点：触发事件的时候，你不需要指定一个特定的源，因为它是使用一个全局对象来处理事件（其实就是一个全局
广播的方式来处理事件）</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// to subscribe</span>
</span><span class="line"><span class="nx">globalBroadcaster</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="err">‘</span><span class="nx">click</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="err">‘</span><span class="nx">click</span><span class="o">!</span><span class="err">’</span><span class="p">);</span> <span class="p">});</span>
</span><span class="line"><span class="c1">// to dispatch</span>
</span><span class="line"><span class="nx">globalBroadcaster</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="err">‘</span><span class="nx">click</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>(3) Signals</p>

<p>特点：与Event Emitter/Target/Dispatcher相似，但是你不要使用随机的字符串作为事件触发的引用。触发事件的每一个对象都需要一个确切的名字（就是类似硬编码类的去写事件名字），并且在触发的时候，也必须要指定确切的事件。（看例子吧，很好理解）</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// to subscribe</span>
</span><span class="line"><span class="nx">otherObject</span><span class="p">.</span><span class="nx">clicked</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="err">‘</span><span class="nx">click</span><span class="err">’</span><span class="p">);</span> <span class="p">});</span>
</span><span class="line"><span class="c1">// to dispatch</span>
</span><span class="line"><span class="k">this</span><span class="p">.</span><span class="nx">clicked</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>

<p>如果你只想简单的使用一下，并不需要其他操作，可以用简单的方式来实现：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 简单实现了一下 subscribe 和 dispatch</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">_events</span><span class="o">:</span> <span class="p">{},</span>
</span><span class="line">		<span class="nx">dispatch</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">				<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">event</span><span class="p">])</span> <span class="p">{</span> <span class="c1">// 没有监听事件</span>
</span><span class="line">					<span class="k">return</span><span class="p">;</span>
</span><span class="line">				<span class="p">}</span>
</span><span class="line">				<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">event</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">						<span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">event</span><span class="p">][</span><span class="nx">i</span><span class="p">](</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">				<span class="p">}</span>
</span><span class="line">		<span class="p">},</span>
</span><span class="line">		<span class="nx">subscribe</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="c1">// 创建一个新事件数组</span>
</span><span class="line">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">event</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">				<span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">event</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">			<span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">event</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">otherObject</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;namechanged&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="p">});</span>
</span><span class="line"><span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;namechanged&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;John&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>如果你想使用 Publish/Subscribe 模型，可以使用：<a href="https://github.com/mroderick/PubSubJS">PubSubJS</a></p>

<p>React 团队使用的是：<a href="http://millermedeiros.github.io/js-signals/">js-signals</a> 它基于 Signals 模式，用起来相当不错。</p>

<h3 id="events-in-react">Events in React</h3>

<p>使用 React 事件的时候，必须关注下面两个方法：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">componentDidMount</span>
</span><span class="line"><span class="nx">componentWillUnmount</span>
</span></code></pre></td></tr></table></div></figure>

<p>在处理事件的时候，需要注意：</p>

<p>在 componentDidMount 事件中，如果组件挂载（mounted）完成，再订阅事件；当组件卸载（unmounted）的时候，在 componentWillUnmount 事件中取消事件的订阅。</p>

<p>（如果不是很清楚可以查阅 React 对生命周期介绍的文档，里面也有描述。原文中介绍的是 componentWillMount 个人认为应该是挂载完成后订阅事件，比如Animation这个就必须挂载，并且不能动态的添加，谨慎点更好）</p>

<p>因为组件的渲染和销毁是由 React 来控制的，我们不知道怎么引用他们，所以EventEmitter 模式在处理组件的时候用处不大。</p>

<p>pub/sub 模式可以使用，你不需要知道引用。</p>

<p>下面来一个例子：实现有多个 product 组件，点击他们的时候，展示 product 的名字。</p>

<p>(我在例子中引入了之前推荐的 PubSubJS 库，如果你觉得引入代价太大，也可以手写一个简版，还是比较容易的，很好用哈，大家也可以体验，但是我还是不推荐全局广播的方式)</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// 定义一个容器</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">ProductList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">			<span class="k">return</span> <span class="p">(</span>
</span><span class="line">				<span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class="line">					<span class="o">&lt;</span><span class="nx">ProductSelection</span> <span class="o">/&gt;</span>
</span><span class="line">					<span class="o">&lt;</span><span class="nx">Product</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;product 1&quot;</span> <span class="o">/&gt;</span>
</span><span class="line">					<span class="o">&lt;</span><span class="nx">Product</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;product 2&quot;</span> <span class="o">/&gt;</span>
</span><span class="line">					<span class="o">&lt;</span><span class="nx">Product</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;product 3&quot;</span> <span class="o">/&gt;</span>
</span><span class="line">				<span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">			<span class="p">);</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="c1">// 用于展示点击的产品信息容器</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">ProductSelection</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">selection</span><span class="o">:</span> <span class="s1">&#39;none&#39;</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">this</span><span class="p">.</span><span class="nx">pubsub_token</span> <span class="o">=</span> <span class="nx">PubSub</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;products&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">topic</span><span class="p">,</span> <span class="nx">product</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class="line">				<span class="nx">selection</span><span class="o">:</span> <span class="nx">product</span>
</span><span class="line">			<span class="p">});</span>
</span><span class="line">		<span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">componentWillUnmount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">PubSub</span><span class="p">.</span><span class="nx">unsubscribe</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pubsub_token</span><span class="p">);</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="p">(</span>
</span><span class="line">			<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">You</span> <span class="nx">have</span> <span class="nx">selected</span> <span class="nx">the</span> <span class="nx">product</span> <span class="o">:</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">selection</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class="line">		<span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">Product</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">	<span class="nx">onclick</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">PubSub</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;products&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onclick</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p><img src="http://fegg.github.io/images/react/demo5.gif" alt="运行结果" /></p>

<h3 id="es6-yield-and-js-csp">ES6: yield and js-csp</h3>

<p>ES6 中有一种传递信息的方式，使用生成函数(generators)和 yield 关键字。可以看一下 <a href="https://github.com/ubolonton/js-csp">https://github.com/ubolonton/js-csp</a></p>

<p>（这里我写一个简单的 DEMO 介绍一下这种新的传递方式，其实大同小异）</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span><span class="o">*</span> <span class="nx">list</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">				<span class="k">yield</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="k">return</span> <span class="s2">&quot;done.&quot;</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">list</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">cur</span> <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
</span><span class="line"><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="nx">cur</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">cur</span> <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class="line">		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cur</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>以上例子来自于屈屈的一篇博客：<a href="http://imququ.com/post/generator-function-in-es6.html">ES6 中的生成器函数介绍</a> 屈屈是一个大牛，大家可以经常关注他的博客。</p>

<p>通常来说，你有一个队列，对象在里面都能找到一个引用，在定义的时候锁住，当发生的时候，立即打开锁执行。js-csp 是一种解决办法，也许以后还会有其他解决办法。</p>

<h3 id="section-5">结尾</h3>

<p>在实际应用中，按照实际要解决的需求选择解决办法。对于小应用程序，你可以使用 props 和回调的方法进行组件之间的数据交换。你可以通过 pub/sub 模式，以避免污染你的组件。在这里，我们不是在谈论数据，只是组件。对于数据的请求、数据的变化等场景，可以使用 Facebook 的 Flux、Relay、GraphQL 来处理，都非常的好用。</p>

<blockquote>
  <p>文中的每一个例子我都验证过了，主要使用最原始的引入文件方式，创建服务使用的 http-server 包，大家也可以尝试自己来一次。</p>
</blockquote>

<p>译：<a href="http://ctheu.com/2015/02/12/how-to-communicate-between-react-components/#child_to_parent">英文原版</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Angular2]]></title>
    <link href="http://fegg.github.io/blog/20150709/Hello-Angular2/"/>
    <updated>2015-07-09T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20150709/Hello-Angular2</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>Angular 2 正式版还没有出来，但是发现官网已经推广开发版本了，所以尝了一下鲜，来吧，从 Hello World 开始。</p>

<h3 id="section-1">1. 安装需要的工具</h3>

<p>这部分和 ng 2 没多大关系，但是我第一次根据官网 5 分钟配置中发现了一些坑，所以做一下准备，免得打击了第一次使用技术的自信心。</p>

<ol>
  <li>Node 和 NPM 最新版（省略）</li>
  <li>jspm 包管理器来初始化 SystemJS 模块加载器那一套</li>
</ol>

<p><strong>创建一个项目目录</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mkdir ng <span class="o">&amp;&amp;</span> <span class="nb">cd </span>ng
</span></code></pre></td></tr></table></div></figure>

<p><strong>安装 jspm 环境</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo npm install jspm/jspm-cli -g
</span><span class="line">npm init
</span><span class="line">npm install jspm --save-dev
</span><span class="line">// 一路回车就行了
</span><span class="line">jspm init
</span></code></pre></td></tr></table></div></figure>

<p><strong>配置一下 config.js</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">System</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class="line">	<span class="s2">&quot;baseURL&quot;</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="s2">&quot;transpiler&quot;</span><span class="o">:</span> <span class="s2">&quot;traceur&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="s2">&quot;paths&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">		<span class="s2">&quot;*&quot;</span><span class="o">:</span> <span class="s2">&quot;*.js&quot;</span><span class="p">,</span>
</span><span class="line">		<span class="s2">&quot;github:*&quot;</span><span class="o">:</span> <span class="s2">&quot;jspm_packages/github/*.js&quot;</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="s2">&quot;map&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">		<span class="s2">&quot;traceur&quot;</span><span class="o">:</span> <span class="s2">&quot;github:jmcriffey/bower-traceur@0.0.88&quot;</span><span class="p">,</span>
</span><span class="line">		<span class="s2">&quot;traceur-runtime&quot;</span><span class="o">:</span> <span class="s2">&quot;github:jmcriffey/bower-traceur-runtime@0.0.88&quot;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>安装一个本地服务工具</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo npm install -g http-server
</span><span class="line">// ng 目录下启动
</span><span class="line">http-server
</span></code></pre></td></tr></table></div></figure>

<!-- more -->

<h3 id="section-2">2. 开始体验</h3>

<p>（1）使用 TypeScript，所以先安装 tsd 包管理器</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo npm install -g tsd@^0.6.0
</span></code></pre></td></tr></table></div></figure>

<p>（2）安装 ng 2 依赖的核心</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">tsd install angular2 es6-promise rx rx-lite
</span></code></pre></td></tr></table></div></figure>

<p>这里安装完成后会创建包管理器的文件夹：typings</p>

<p>（3）在 ng 目录下创建代码文件</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">touch app.ts index.html
</span></code></pre></td></tr></table></div></figure>

<p>（4）配置一下 TypeScript</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo npm install -g typescript@^1.5.0-beta
</span><span class="line">// 在 ng 目录下运行监听编译
</span><span class="line">tsc --watch -m commonjs -t es5 --emitDecoratorMetadata app.ts
</span></code></pre></td></tr></table></div></figure>

<p>（5）接下来编写 app.ts 文件</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">///&lt;reference path=&quot;typings/angular2/angular2.d.ts&quot; /&gt;</span>
</span><span class="line"><span class="kr">import</span> <span class="p">{</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">View</span><span class="p">,</span> <span class="nx">bootstrap</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;angular2/angular2&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Annotation section</span>
</span><span class="line"><span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
</span><span class="line">	<span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;my-app&#39;</span>
</span><span class="line"><span class="p">})</span>
</span><span class="line"><span class="err">@</span><span class="nx">View</span><span class="p">({</span>
</span><span class="line">	<span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;h1&gt;Hello &lt;/h1&gt;&#39;</span>
</span><span class="line"><span class="p">})</span>
</span><span class="line"><span class="c1">// Component controller</span>
</span><span class="line"><span class="kr">class</span> <span class="nx">MyAppComponent</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">name</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">	<span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Angular2&#39;</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">bootstrap</span><span class="p">(</span><span class="nx">MyAppComponent</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>（6）下载官方的 traceur-runtime.js 和 angular2.dev.js（为了速度，你也可以直接引入）</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- index.html --&gt;</span>
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line">	<span class="nt">&lt;head&gt;</span>
</span><span class="line">		<span class="nt">&lt;title&gt;</span>Angular 2 Quickstart<span class="nt">&lt;/title&gt;</span>
</span><span class="line">		<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;typings/js/traceur-runtime.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">		<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;jspm_packages/system.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">		<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;config.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">		<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;typings/js/angular2.dev.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">	<span class="nt">&lt;/head&gt;</span>
</span><span class="line">	<span class="nt">&lt;body&gt;</span>
</span><span class="line">
</span><span class="line">	<span class="c">&lt;!-- The app component created in app.ts --&gt;</span>
</span><span class="line">	<span class="nt">&lt;my-app&gt;&lt;/my-app&gt;</span>
</span><span class="line">	<span class="nt">&lt;script&gt;</span><span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./app&#39;</span><span class="p">);</span><span class="nt">&lt;/script&gt;</span>
</span><span class="line">
</span><span class="line">	<span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>最后的文件目录如下：</p>

<p><img src="http://fegg.github.io/images/js/ng2-dev.png" alt="文件目录" /></p>

<p>运行的结果图：</p>

<p><img src="http://fegg.github.io/images/js/ng2-hello.png" alt="ng2 hello" /></p>

<p>源码下载：<a href="http://yunpan.cn/ccy6mh9hrSwHK">360云盘下载</a> （提取码：0da5）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从触摸开始（一）]]></title>
    <link href="http://fegg.github.io/blog/20150524/touch-start/"/>
    <updated>2015-05-24T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20150524/touch-start</id>
    <content type="html"><![CDATA[<h3 id="section">1. 前言</h3>

<p>最近看了一本《移动Web手册》的书，奇舞团翻译的，非常不错。个人觉得在进入移动端的时候最先应该了解移动端新的交互模式：<strong>触摸</strong>。为什么这样说呢？在PC端，我们大多数的交互都是通过<strong>鼠标</strong>来实现，在开发过程中，对鼠标事件的处理也非常多，通过之前在移动端的开发经验，在移动端的交互也避免不了经常与触摸打交道，所以我们有必要单独学习一下它。</p>

<h3 id="section-1">2. 触摸、鼠标交互模式</h3>

<p><strong>(1) 连续性</strong></p>

<p>触摸事件是不连续的，鼠标事件是连续的。</p>

<p><img src="http://p1.qhimg.com/t01995847f1bbafff14.png" alt="连续性" /></p>

<p>操作顺序：A -&gt; B -&gt; C</p>

<p>在鼠标上：鼠标点击A -&gt; 划过B -&gt; 点击C</p>

<p>在触摸上：手指触摸A -&gt; 跨过B -&gt; 触摸C</p>

<!-- more -->

<p><strong>(2) 下一步预期的操作</strong></p>

<p>在鼠标上：移入元素 -&gt; 点击鼠标左键 -&gt; 触发单击 -&gt; 在有效时间内点击第二次 -&gt; 触发双击</p>

<p><img src="http://p6.qhimg.com/t0158d291e5b4957da5.jpg" alt="鼠标" /></p>

<p>在触摸上，可能有以下几种情况：</p>

<ol>
  <li>手指触摸屏幕 -&gt; 轻触</li>
  <li>手指触摸屏幕 -&gt; 双触</li>
  <li>手指触摸屏幕 -&gt; 滑动</li>
  <li>手指触摸屏幕 -&gt; 缩放</li>
</ol>

<p><img src="http://p8.qhimg.com/t011432add6b1f1b6e4.jpg" alt="触摸" /></p>

<blockquote>
  <p>其实作者认为鼠标事件在用户点击的时候就能够判断行为，其实我觉得如果是双击事件的情况下，浏览器也需要等待一段时间才能够做出反应。这个可以查阅一下google。</p>
</blockquote>

<p><strong>(3) 等价事件</strong></p>

<p><img src="http://p7.qhimg.com/t0153cb2eaf3a9addb3.png" alt="等价事件" /></p>

<h3 id="section-2">3. 单说触摸事件</h3>

<p>在了解两种不同的交互模式的基础上，我们再来进行单个的分析。其实我觉得学习一样东西，最根本的还是摸清原理部分，就能够很快的Get它了，当然，编码量不够的情况下也许还是需要慢慢来，掌握得更加扎实。</p>

<p><strong>(1) 事件种类</strong></p>

<ul>
  <li>touchstart: 手指触摸屏幕的瞬间</li>
  <li>touchmove: 手指在屏幕上移动的时候</li>
  <li>touchend: 手指离开屏幕的时候</li>
  <li>touchcancel</li>
</ul>

<p>其实从命名上就能很清楚的明白他们是干嘛的，当然，有一个比较特殊：touchcancel事件，可能会不太好理解，在最初的学习中可以忽略它，这里做一个简单的介绍：</p>

<blockquote>
  <p>touchcancel 在系统发生中断的时候会触发，这样说很抽象，我们来举一个栗子，比如你正在玩游戏，触摸的时候，突然手机来了一条短信，这个时候短信通知这个更高级的事件中断了触摸操作，touchcancel事件就触发了。在这个时候游戏开发中，会使用它来进行暂停游戏等操作。</p>
</blockquote>

<p>由于touchcancel触发的时机不好掌控，所以一般情况下我们会采用下面的方式来处理touchcancel，维护我们的代码逻辑，当然这个要看业务场景。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">dom</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchcancel&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class="line">	<span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class="line"><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>(2) 触发时机</strong></p>

<p>介绍完了事件的种类，我们来对每一种事件都进行代码级别的测试，看一看是否跟它说的先后顺序一样，这里我将引入鼠标事件一起测试，因为有一些区别性的东西哦。</p>

<p>我们先看一下测试结果：(iOS 8.3 Safari)</p>

<p><strong>A.直接触摸空白部分，然后直接离开</strong></p>

<p><img src="http://p6.qhimg.com/t014f36b6caddf59eea.png" alt="" /></p>

<p><strong>B.在空白区域触摸并滑动，然后离开</strong></p>

<p><img src="http://p8.qhimg.com/t0185793a0e4fd34658.png" alt="" /></p>

<p><strong>C.点击界面中的按钮，未阻止冒泡</strong></p>

<p><img src="http://p3.qhimg.com/t01344b50e10dd503a3.png" alt="" /></p>

<p><strong>D.点击界面中一块区域，阻止冒泡</strong></p>

<p><img src="http://p6.qhimg.com/t0133d2b926bcb771ba.png" alt="" /></p>

<p><strong>E.长按屏幕空白部分，出现选中效果，然后立刻离开屏幕</strong></p>

<p><img src="http://p1.qhimg.com/t0151dc690eab55b394.png" alt="" /></p>

<p>结果很明了，就不需要总结了，下面我们看一下测试的代码：</p>

<p><strong>DOM</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div&gt;</span>
</span><span class="line">	<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span><span class="nt">&gt;</span>这里是一个按钮<span class="nt">&lt;/button&gt;</span>
</span><span class="line">	<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;area&quot;</span><span class="nt">&gt;</span>这里是一块可点击区域<span class="nt">&lt;/span&gt;</span>
</span><span class="line">	<span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;info&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>JavaScript</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">;(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">;</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.info&#39;</span><span class="p">);</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">);</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">area</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.area&#39;</span><span class="p">);</span>
</span><span class="line">	
</span><span class="line">	<span class="nx">doc</span><span class="p">.</span><span class="nx">ontouchstart</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">doc</span><span class="p">.</span><span class="nx">ontouchmove</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">doc</span><span class="p">.</span><span class="nx">ontouchend</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">doc</span><span class="p">.</span><span class="nx">ontouchcancel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="nx">doc</span><span class="p">.</span><span class="nx">onmouseover</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">doc</span><span class="p">.</span><span class="nx">onmousemove</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">doc</span><span class="p">.</span><span class="nx">onmousedown</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">doc</span><span class="p">.</span><span class="nx">onmouseup</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">doc</span><span class="p">.</span><span class="nx">onmouseleave</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">doc</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, document: &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, button: &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="nx">area</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>
</span><span class="line">		<span class="nx">info</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;, area: &#39;</span><span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>CSS</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nc">.btn</span> <span class="p">{</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class="line">	<span class="k">height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class="line">	<span class="k">line-height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class="line">	<span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class="line">	<span class="k">border</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">	<span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class="line">	<span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class="line">	<span class="k">background</span><span class="o">:</span> <span class="m">#2A3846</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.area</span> <span class="p">{</span>
</span><span class="line">	<span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class="line">	<span class="k">height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class="line">	<span class="k">line-height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class="line">	<span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class="line">	<span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class="line">	<span class="k">background</span><span class="o">:</span> <span class="m">#2A3846</span><span class="p">;</span>
</span><span class="line">	<span class="k">margin-top</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>为了不干扰直接知识的理解，之前没有说不同meta头的事情，以及Safari与UC浏览器之间的差异。毕竟要接地气嘛，UC还是要测试一下的。</p>

<p><strong>情况一</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>行为：“触摸空白区域，立刻离开时候的现象”</p>

<p>现象：</p>

<p>Safari：touchstart与touchend事件触发后，延迟一段时间，触发mouse以及click事件；</p>

<p>UC：只触发了touchstart与touchend事件，并无触发mouse和click事件。</p>

<p>行为：“点击页面的按钮（或者元素区域），立刻离开时候的现象”</p>

<p>现象：</p>

<p>Safari：touchstart与touchend事件触发后，延迟一段时间，触发mouse以及click事件，不过click触发是从按钮到document的顺序；</p>

<p>UC：与Safari中表现一致。</p>

<p>总结：</p>

<ul>
  <li>如果没有禁止缩放，Safari和UC中的点击事件均有延迟现象；</li>
  <li>在document上绑定事件，与其他元素上绑定事件上述两个浏览器之间存在差异。</li>
</ul>

<hr />

<p><strong>情况二</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>先不考虑这样写不符合单一变量测试原则，国内移动网站大多都是这样的meta头，当然，我有测试过，只要带有user-scalable一项就能够满足下面的实验。</p>

<p>不过下面的实验我们排除“点击空白区域这种情况”，因为这document绑定事件确实有差异，我们只测试“点击按钮”这一种行为。</p>

<p>行为：“点击页面的按钮（或者元素区域），立刻离开时候的现象”</p>

<p>现象：</p>

<p>Safari：touchstart与touchend事件触发后，延迟一段时间，触发mouse以及click事件，不过click触发是从按钮到document的顺序；</p>

<p>UC：touchstart、touchend、mouse、click先后顺序不变，但是几乎是同时触发，没有发生延迟。</p>

<p>总结：</p>

<p>在这种情况下，Safari依然存在click事件延迟，UC不存在延迟。</p>

<p>好吧，我承认这样实验有点枯燥，但是必须得这样才能弄明白到底怎么了，到底是怎么了。。。</p>

<blockquote>
  <p>Tip：这里赞美一下Safari，它能够很好的监听touchmove事件，几乎和手指移动的速度是一样的，UC和Chrome表现均是手指移动一段事件后，再从事件栈里面抛出触发，当然，Chrome触发的速度比UC好。还没有实际例子测试，不知是否会有影响，大家可以测试了给一下结果。</p>
</blockquote>

<p>发现总结成博文好慢，先不写了，睡觉，接下来有时间将总结以下内容：</p>

<ul>
  <li>事件级联深入解析</li>
  <li>300ms延迟的产生原理与解决方案</li>
  <li>事件默认事件、事件冒泡在移动端的影响</li>
  <li>触摸事件怎么玩？</li>
  <li>触摸中的摇曳与HTML5中的摇曳栗子</li>
  <li>触摸中无限滚动的栗子</li>
  <li>W3C中的Touch Events</li>
  <li>未来的Pointer Events</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[像积木一样搭建网页]]></title>
    <link href="http://fegg.github.io/blog/20141202/play-build-web-pages/"/>
    <updated>2014-12-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20141202/play-build-web-pages</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>我们在浏览网页的时候，经常会看到很相似的几种内容。比如下面这两种样子：</p>

<p><img src="http://p4.qhimg.com/t010118aee227f746a5.png" alt="视图1" /></p>

<p><img src="http://p4.qhimg.com/t0188a9a78a17386fb9.png" alt="视图2" /></p>

<p>看上去是不是比较像呢？其实就是图片的位置不一样，大致上可以认为是一样的吧，那么针对这样子的相似度较高的网页，我们应该怎么样开发呢？</p>

<blockquote>
  <p>其实这就得谈谈“页面重用机制”了，下面所写的积木式网页构建方式就能够很好的处理页面重用这个问题。</p>
</blockquote>

<p>接下来将从以下4个方面对积木式网页开发进行描述：</p>

<ol>
  <li>分析页面结构</li>
  <li>构建网页的结构</li>
  <li>编写网页基本的样式</li>
  <li>编写不同表现的样式</li>
</ol>

<!-- more -->

<h3 id="section-1">一、分析页面结构</h3>

<p>虽然HTML的语法那些很简单，但是在网页设计和开发中，它却占据着不可动摇的地位。首先我们需要根据设计师的PSD和产品经理所描述的需求，然后确定我们网页的结构，反复的与他们沟通，确定更多的信息，才让我们的网页结构的生命周期变得更长。</p>

<p>这里推荐一个Chrome的插件，可以瞬间去除CSS和JavaScript的效果，查看到最原始网页的表现。</p>

<blockquote>
  <p>Web Developer</p>
</blockquote>

<p>下面我们要参考的结构就如下图中2种样子：</p>

<p><img src="http://p5.qhimg.com/t0138cd1fbdfbc5ff7e.png" alt="视图1" /></p>

<p><img src="http://p1.qhimg.com/t01e4dfb2288f445e02.png" alt="视图2" /></p>

<p>我用红线大致描了一下页面的信息块，接下来我们来分析一下信息：</p>

<ol>
  <li>一张展示图</li>
  <li>一个标题</li>
  <li>商品的列表信息（包括总价）</li>
  <li>附属品的列表信息</li>
  <li>购买按钮</li>
</ol>

<p>好吧，这里就不需要PM来确认啦，自己当一回PM ^8^，接下来我们需要描述网页结构。</p>

<h3 id="section-2">二、构建网页的结构</h3>

<p>经过上面的分析，我们可以得出如下的DOM结构：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;productStackWrap&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	<span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;psImage&quot;</span> <span class="na">src=</span><span class="s">&quot;http://p5.qhimg.com/t01bc7da5a2c6e90308.jpg&quot;</span> <span class="na">alt=</span><span class="s">&quot;卢林&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;psArticleWrap&quot;</span><span class="nt">&gt;</span>
</span><span class="line">		<span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;psTitle&quot;</span><span class="nt">&gt;</span>赔本大甩卖<span class="nt">&lt;/h1&gt;</span>
</span><span class="line">		<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;psPriceWrap&quot;</span><span class="nt">&gt;</span>
</span><span class="line">			<span class="nt">&lt;li&gt;</span>
</span><span class="line">				<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;spLabel&quot;</span><span class="nt">&gt;</span>眼镜<span class="nt">&lt;/span&gt;</span>
</span><span class="line">				<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;spAmount&quot;</span><span class="nt">&gt;</span>500元<span class="nt">&lt;/span&gt;</span>
</span><span class="line">			<span class="nt">&lt;/li&gt;</span>
</span><span class="line">			<span class="nt">&lt;li&gt;</span>
</span><span class="line">				<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;spLabel&quot;</span><span class="nt">&gt;</span>外套<span class="nt">&lt;/span&gt;</span>
</span><span class="line">				<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;spAmount&quot;</span><span class="nt">&gt;</span>300元<span class="nt">&lt;/span&gt;</span>
</span><span class="line">			<span class="nt">&lt;/li&gt;</span>
</span><span class="line">			<span class="nt">&lt;li&gt;</span>
</span><span class="line">				<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;spLabel&quot;</span><span class="nt">&gt;</span>iPhone 5S<span class="nt">&lt;/span&gt;</span>
</span><span class="line">				<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;spAmount&quot;</span><span class="nt">&gt;</span>88元<span class="nt">&lt;/span&gt;</span>
</span><span class="line">			<span class="nt">&lt;/li&gt;</span>
</span><span class="line">			<span class="nt">&lt;li&gt;</span>
</span><span class="line">				<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;spLabel&quot;</span><span class="nt">&gt;</span>总价<span class="nt">&lt;/span&gt;</span>
</span><span class="line">				<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;spAmount spTotalPrice&quot;</span><span class="nt">&gt;</span>仅需888元<span class="nt">&lt;/span&gt;</span>
</span><span class="line">			<span class="nt">&lt;/li&gt;</span>
</span><span class="line">		<span class="nt">&lt;/ul&gt;</span>
</span><span class="line">		<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;spDescriptionWrap&quot;</span><span class="nt">&gt;</span>
</span><span class="line">			<span class="nt">&lt;p&gt;</span>附带品<span class="nt">&lt;/p&gt;</span>
</span><span class="line">			<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;descBulletsUL&quot;</span><span class="nt">&gt;</span>
</span><span class="line">				<span class="nt">&lt;li&gt;</span>可乐一罐<span class="nt">&lt;/li&gt;</span>
</span><span class="line">				<span class="nt">&lt;li&gt;</span>饭碗一个<span class="nt">&lt;/li&gt;</span>
</span><span class="line">				<span class="nt">&lt;li&gt;</span>6块钱的麻辣烫<span class="nt">&lt;/li&gt;</span>
</span><span class="line">			<span class="nt">&lt;/ul&gt;</span>
</span><span class="line">		<span class="nt">&lt;/div&gt;</span>
</span><span class="line">		<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;psCTA&quot;</span><span class="nt">&gt;</span>买买买<span class="nt">&lt;/button&gt;</span>
</span><span class="line">	<span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>我们这里不需要任何样式，也会是一个很美的网页，至少看起来整洁，信息整齐。（图片太大，直截取文本部分。因为图片的宽、高在初始化的时候必须要设置的，至于为什么要设置可以查阅Google，主要是给图片预留空间，提升文档性能。）</p>

<p><img src="http://p5.qhimg.com/t0146e9616541c6732a.png" alt="无样式的表现" /></p>

<p>好吧，到这里我们的DOM结构就构造完了，接下来添加一点基本的，也可以理解为公用的样式，这里的公用可以不理解为积木块共有的样式。说起来绕了一点，也就是说不同表现的共有样式可以与本身结构具有的基本样式进行分离，这个可以看自己喜好来决定。</p>

<h3 id="section-3">三、编写网页基本的样式</h3>

<p>在此之前我们来看看我本地的文件结构：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">demo  //文件夹
</span><span class="line">	A.css  //样式1
</span><span class="line">	B.css  //样式2
</span><span class="line">	index.css  //基本样式
</span><span class="line">	index.html //DOM结构
</span></code></pre></td></tr></table></div></figure>

<p>这里可以处理一些基本的网页样式信息，比如恢复一些元素的默认值、调整部分间隙。这部分代码位于：index.css中，内容放入文章末尾吧，这里我们连贯的描述怎么做页面重用。</p>

<h3 id="section-4">四、编写不同表现的样式</h3>

<p>说了怎么久，DOM结构和基本样式都搞好啦，那么现在我们来实现我们的两张图。现在我们只需要做的是在最外层DOM结构中加入不同的类名：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">// A类样式
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;productStackWrap psTreatmentA&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</span><span class="line">// B类样式
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;productStackWrap psTreatmentB&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>这样我们利用CSS的权重来控制特殊的样式，其实这里的 psTreatmentA 类更像一个命名空间，如果用严格的语言来理解的话，那么可以理解为：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">psTreatmentA</span> <span class="kd">implements</span> <span class="n">productStackWrap</span> <span class="o">{</span>
</span><span class="line">	<span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="kd">class</span> <span class="nc">psTreatmentB</span> <span class="kd">implements</span> <span class="n">productStackWrap</span> <span class="o">{</span>
</span><span class="line">	<span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="kd">class</span> <span class="nc">psTreatmentN</span> <span class="kd">implements</span> <span class="n">productStackWrap</span> <span class="o">{</span>
</span><span class="line">	<span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
  <p>注意这里用的是接口哦，CSS的复用可以是多继承的关系，至少我是这么理解的。</p>
</blockquote>

<p>那么我们改怎么针对这个类来写属于它实例的样式呢？那么看一下下面两段代码就可以理解了。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="c">/* A类样式 */</span>
</span><span class="line"><span class="nc">.psTreatmentA</span> <span class="p">{</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">310px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psTreatmentA</span> <span class="nc">.psImage</span> <span class="p">{</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">80px</span><span class="p">;</span>
</span><span class="line">	<span class="k">height</span><span class="o">:</span> <span class="m">112px</span><span class="p">;</span>
</span><span class="line">	<span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psTreatmentA</span> <span class="nc">.psTitle</span> <span class="p">{</span>
</span><span class="line">	<span class="k">margin-left</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psTreatmentA</span> <span class="nc">.psPriceWrap</span> <span class="p">{</span>
</span><span class="line">	<span class="k">margin-left</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
</span><span class="line">	<span class="k">text-align</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psTreatmentA</span> <span class="nc">.psCTA</span> <span class="p">{</span>
</span><span class="line">	<span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="k">auto</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c">/* B类样式 */</span>
</span><span class="line"><span class="nc">.psTreatmentB</span> <span class="p">{</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">385px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psTreatmentB</span> <span class="nc">.psImage</span> <span class="p">{</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">386px</span><span class="p">;</span>
</span><span class="line">	<span class="k">height</span><span class="o">:</span> <span class="m">287px</span><span class="p">;</span>
</span><span class="line">	<span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class="line">	<span class="k">margin-bottom</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psTreatmentB</span> <span class="nc">.psPriceWrap</span> <span class="p">{</span>
</span><span class="line">	<span class="k">text-align</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class="line">	<span class="k">margin-left</span><span class="o">:</span> <span class="m">110px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psTreatmentB</span> <span class="nc">.psTitle</span> <span class="p">{</span>
</span><span class="line">	<span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class="line">	<span class="k">font-size</span><span class="o">:</span> <span class="m">27px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>这样做了过后就能够使用同一套DOM结构，来穿上不同的样式了，技术是很简单的技术，但是不同的玩法能玩出不同的精彩哦~</p>

<p>那么，这样做有什么好处呢？这里随机列几条吧。</p>

<p><strong>场景一：</strong></p>

<p>PM说：“我们换回以前那份设计稿吧。”</p>

<p>FE说：“好的，马上弄。”（随手删除了引入的B样式，引入A样式，OK，解决问题~）</p>

<p><strong>场景二：</strong></p>

<p>PM说：“这是最新设计稿，要赶紧上线，1天能上线吗？”</p>

<p>FE说：“我看看设计稿来（啪啪啪~看完设计稿，发现其中有很多复用的网页样式）。”</p>

<p>FE再说：“我尽力吧，晚上做完回你。（使用通用的结构include，最后将之前项目中的A…N样式拿来一套，解决问题！）”</p>

<p>好处还有很多呢，等待你去发现~</p>

<h3 id="section-5">五、最后结束语</h3>

<p>虽然上面文章描述了样式上的重用，其实在JS行为的把握上我们也可以使用相同处理事情的方式，将JS行为的类将表现给分离出来，能够更好的应对需求的变更以及增加代码的可维护~</p>

<p>附：（文章例子中的基本样式）</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nc">.productStackWrap</span> <span class="p">{</span>
</span><span class="line">	<span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class="line">	<span class="k">font-size</span><span class="o">:</span> <span class="m">14px</span><span class="p">;</span>
</span><span class="line">	<span class="k">margin</span><span class="o">:</span> <span class="m">40px</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line">	<span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#999</span><span class="p">;</span>
</span><span class="line">	<span class="k">padding</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psTitle</span> <span class="p">{</span>
</span><span class="line">	<span class="k">font-size</span><span class="o">:</span> <span class="m">21px</span><span class="p">;</span>
</span><span class="line">	<span class="k">font-weight</span><span class="o">:</span> <span class="m">700</span><span class="p">;</span>
</span><span class="line">	<span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">5px</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psPriceWrap</span> <span class="p">{</span>
</span><span class="line">	<span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psPriceWrap</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class="line">	<span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">	<span class="k">padding</span><span class="o">:</span> <span class="m">2px</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.spLabel</span> <span class="p">{</span>
</span><span class="line">	<span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">75px</span><span class="p">;</span>
</span><span class="line">	<span class="k">text-align</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class="line">	<span class="k">padding-right</span><span class="o">:</span> <span class="m">3px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.spAmount</span> <span class="p">{</span>
</span><span class="line">	<span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">75px</span><span class="p">;</span>
</span><span class="line">	<span class="k">text-align</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class="line">	<span class="k">font-weight</span><span class="o">:</span> <span class="m">700</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.spTotalPrice</span> <span class="p">{</span>
</span><span class="line">	<span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.spDescriptionWrap</span> <span class="nt">p</span> <span class="p">{</span>
</span><span class="line">	<span class="k">line-height</span><span class="o">:</span> <span class="m">150%</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.psCTA</span> <span class="p">{</span>
</span><span class="line">	<span class="k">background</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class="line">	<span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class="line">	<span class="k">padding</span><span class="o">:</span> <span class="m">5px</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">120px</span><span class="p">;</span>
</span><span class="line">	<span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class="line">	<span class="k">border</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line">	<span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class="line">	<span class="k">font-size</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class="line">	<span class="k">text-shadow</span><span class="o">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">#666</span><span class="p">;</span>
</span><span class="line">	<span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class="line">	<span class="k">background</span><span class="o">-</span><span class="k">clip</span><span class="o">:</span> <span class="k">padding</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
</span><span class="line">	<span class="k">background</span><span class="o">:</span> <span class="m">#92c436</span><span class="p">;</span>
</span><span class="line">	<span class="k">background</span><span class="o">:</span> <span class="n">linear</span><span class="o">-</span><span class="n">gradient</span><span class="p">(</span><span class="k">top</span><span class="o">,</span> <span class="m">#92c436</span> <span class="m">0%</span><span class="o">,</span> <span class="m">#97c64b</span> <span class="m">50%</span><span class="o">,</span> <span class="m">#80c217</span> <span class="m">51%</span><span class="o">,</span> <span class="m">#7cbc0a</span> <span class="m">100%</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.descBulletsUL</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class="line">	<span class="k">padding</span><span class="o">:</span> <span class="m">4px</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步步学习ThinkJS（一）]]></title>
    <link href="http://fegg.github.io/blog/20141127/one-step-study-thinkjs1/"/>
    <updated>2014-11-27T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20141127/one-step-study-thinkjs1</id>
    <content type="html"><![CDATA[<h3 id="section">八卦</h3>

<p>在2014年9月22日的时候，ThinkJS 1.0开了一个简单的发布会，去抢啦几块蛋糕来吃~现在还记得蛋糕超级好吃！- 0 - 不过成银这套NodeJS框架真心很好用（可能是以前用J2EE的框架用得比较多，所以感觉MVC这类框架比较好理解，不过文章写得很详细，相信看完就能上手），也很强大，上手极快，我相信它将越来越火！下面我们来入个门哈，如果有写得不对的可以直接指出来，使自己进步 ^o^</p>

<p>如果要看官方文档资料，可以进入<a href="http://thinkjs.org/doc.html">ThinkJS官网地址</a></p>

<p>当然，也少不了手把手视频教程，大家可以去看哦！</p>

<p><a href="http://thinkjs.org/video.html">ThinkJS视频教程</a></p>

<h3 id="thinkjs">一、安装ThinkJS</h3>

<p>首先得知道ThinkJS是基于NodeJS来玩的MVC框架，所以第一步是先安装NodeJS，直接去官网下载一个pkg的安装包即可。</p>

<p><a href="http://nodejs.org/">NodeJS官网</a></p>

<p>如果你翻墙不了，可以到我分享的360云盘去下载：</p>

<p><a href="http://yunpan.cn/cAtcbhmeYZKss">NodeJS 360云盘地址</a>  （提取码：47a2）</p>

<!-- more -->

<p>好啦，准备工作就这些，这里我使用的是Unix环境，如果你是Windows的话，可以去查其他教程，但是建议玩NodeJS就不要在Windows上玩了。下面我的命令基本都是使用sudo权限，看过我文章的都知道，是为了不给自己找不必要的麻烦。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo npm install -g thinkjs-cmd
</span></code></pre></td></tr></table></div></figure>

<p>暂时还没遇到过下载不下来的情况，所以不需要用镜像了。下载完成后你会发现有一些依赖的库都顺带下载下来了。</p>

<p>我们可以先看一下ThinkJS依赖的NodeJS版本、包的源文件地址、依赖信息</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">npm view thinkjs engines
</span><span class="line">npm view thinkjs repository.url
</span><span class="line">npm view thinkjs dependencies
</span></code></pre></td></tr></table></div></figure>

<p>这里就不贴结果了，可以运行试试，主要是依赖的版本和依赖信息，可以看出ThinkJS能够使用其他什么技术进行开发（默认的模板引擎：ejs，NodeJS默认的就是这玩意；依赖ES6-Promise，可以让你感受不一样写JS的赶脚；还有WebSocket等实用接口）。</p>

<p>接来下我们先创建一个ThinkJS项目，按步骤来就行了，so easy!</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">//进入一个ROOT目录
</span><span class="line"><span class="nb">cd</span> ~/Documents
</span><span class="line">//创建项目根目录文件以及进入该文件
</span><span class="line">mkdir thinkjs <span class="o">&amp;&amp;</span> <span class="nb">cd </span>thinkjs
</span><span class="line">//快速创建
</span><span class="line">thinkjs .
</span></code></pre></td></tr></table></div></figure>

<p>这样子就可以了，很方便吧，最后会默认在终端提示：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Application create finished
</span></code></pre></td></tr></table></div></figure>

<p>并且打开默认浏览器，在浏览器中显示：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">hello, thinkjs!
</span></code></pre></td></tr></table></div></figure>

<p>在浏览器地址栏，可以看出默认的端口是：<strong>8360</strong></p>

<p>现在我们就可以开始撸码啦，那么我们先来看看生成的ThinkJS的一个项目长什么样子吧。</p>

<h3 id="section-1">二、项目目录简介</h3>

<p>大家看了目录不要失望，对，就长下面那个戳样，不过真心是很好用的一个框架！</p>

<p><img src="http://p4.qhimg.com/t019f1e0f87d83b3d83.png" alt="ThinkJS默认目录结构" /></p>

<p>主要说一下App、www这两个目录，因为入门的话，完全就够了，不要搞得太复杂，以至于学不下去。</p>

<p><strong>- App</strong></p>

<p>这个文件里面的就是MVC设计模式的核心，你可以将APP/Lib目录展开，最后在APP目录下可以发现三个目录：</p>

<ul>
  <li>Model （数据模型）</li>
  <li>Controller （控制类）</li>
  <li>View （界面类）</li>
</ul>

<p>所以分工相当的明确。</p>

<p>MVC设计模式解决的问题之一是：M与V的解耦。C负责数据与界面数据的同步。但是这样说还是很模糊吧，如果学过J2EE的Struts2、SSH或者Spring MVC会特别熟悉这一块，所以我们来通俗的说一下。</p>

<p>比如我们做项目的流程就是：</p>

<blockquote>
  <p>【创建数据库、表】-&gt;【取出数据】-&gt;【界面获取数据展现】</p>
</blockquote>

<p><img src="http://p6.qhimg.com/t019347a6bf1453c4c0.png" alt="流程" /></p>

<p>这里的流程简图为了更直观理解，所以倒放了，实际操作是逆向的。</p>

<p>现在我们在【取出数据】与【界面展现】中间隔离一下，将对数据的逻辑操作独立出来，形成一层【控制层】。</p>

<blockquote>
  <p>【控制层】就通过调用【数据模型】获取数据，来与【界面展现】进行交互，并且控制用户的输入，最后向【数据模型】层发送数据。这样就做到了【数据模型】层不直接与【界面展现】层打交道，达到解耦的目的。</p>
</blockquote>

<p><img src="http://p3.qhimg.com/t0139892a3cd097f2ec.png" alt="改进为MVC模型" /></p>

<p>现在有这样一个需求：我们要从数据库的“think_user”表中，读取数据，其中数据包括：用户名、用户头像、用户博客链接3个数据，最后展现到界面中，形成如下图所示的样子：</p>

<p><img src="http://p2.qhimg.com/t01132f641e8b05fdef.png" alt="效果图" /></p>

<p>很简单的需求，是吧！就是一个查询，再遍历展示的操作，不过只要你会了这一步，CRUD你就可以轻松掌握了。</p>

<p>接下来我们将按照：创建数据库和表 -&gt; 编写数据模型 -&gt; 编写控制层 -&gt; 编写界面层的顺序来玩一玩ThinkJS。</p>

<h3 id="section-2">三、创建数据库和表</h3>

<p>之前的一篇文章写过<a href="http://blog.51yuekan.com/2014/11/26/2014-11-26-Mac%20OS%20X%2010.9%E9%85%8D%E7%BD%AEAMP%E7%8E%AF%E5%A2%83/">Max OS X上搭建MySQL</a>，这里我就直接开始了。</p>

<ul>
  <li>创建数据库、创建think_user表</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">create</span> <span class="k">database</span> <span class="n">blog</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">use</span> <span class="n">blog</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">create</span> <span class="k">table</span> <span class="n">think_user</span> <span class="p">(</span>
</span><span class="line">	<span class="n">userid</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class="line">	<span class="n">username</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class="line">	<span class="n">passwd</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class="line">	<span class="n">photo</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class="line">	<span class="n">blogurl</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">default</span> <span class="k">null</span><span class="p">,</span>
</span><span class="line">	<span class="k">primary</span> <span class="k">key</span><span class="p">(</span><span class="n">userid</span><span class="p">)</span>
</span><span class="line"><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>按照自己的需要添加一些数据，最好在创建库的时候使用UTF8编码和字符集。</li>
</ul>

<p>最后搞出来的样子如下图所示：</p>

<p><img src="http://p5.qhimg.com/t01be1402d6468f06ad.png" alt="数据情况" /></p>

<p>接下来我们需要找到创建的ThinkJS项目的对应数据库映射配置文件：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">App/Conf/config.js
</span></code></pre></td></tr></table></div></figure>

<p>这个文件里面配置了一些MySQL的参数，官方解释得很清晰，这里面也可以看出我们为什么表要以think_为前缀的原因。我的配置如下：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">//配置项: 配置值</span>
</span><span class="line">	<span class="nx">port</span><span class="o">:</span> <span class="mi">8360</span><span class="p">,</span> <span class="c1">//监听的端口</span>
</span><span class="line">	<span class="nx">db_type</span><span class="o">:</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span> <span class="c1">// 数据库类型</span>
</span><span class="line">	<span class="nx">db_host</span><span class="o">:</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="c1">// 服务器地址</span>
</span><span class="line">	<span class="nx">db_port</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="c1">// 端口</span>
</span><span class="line">	<span class="nx">db_name</span><span class="o">:</span> <span class="s1">&#39;blog&#39;</span><span class="p">,</span> <span class="c1">// 数据库名</span>
</span><span class="line">	<span class="nx">db_user</span><span class="o">:</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="c1">// 用户名</span>
</span><span class="line">	<span class="nx">db_pwd</span><span class="o">:</span> <span class="s1">&#39;lulin&#39;</span><span class="p">,</span> <span class="c1">// 密码，= =明文的</span>
</span><span class="line">	<span class="nx">db_prefix</span><span class="o">:</span> <span class="s1">&#39;think_&#39;</span><span class="p">,</span> <span class="c1">// 数据库表前缀</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>这样我们的配置工作就弄完啦，可以开始撸码啦。先查询出全部的user信息。</p>

<h3 id="section-3">四、编写数据模型</h3>

<p>我们需要在“Lib/Model”目录下面建立一个文件”UserModel.js”，详情如下图：</p>

<p><img src="http://p3.qhimg.com/t01a7940516c348787a.png" alt="目录结构" /></p>

<p>这里的名字是有讲究的，与数据库中的think_user表是对应的，默认除去think_前缀。不推荐使用奇葩写法来映射，虽然官方提供了自己手动做一些解析，但是要从最开始就养成好习惯，好处以后会慢慢体现出来。</p>

<p>好，接下来我们看看查询think_user表的数据代码是怎么样子的：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Model</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">getUserList</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">			<span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">			<span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">select</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">				<span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
</span><span class="line">			<span class="p">});</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>是不是感觉简单爆啦！对，用起来就是这般酸爽！官方还提供了更多的方式，现在可以看看<a href="http://thinkjs.org/doc/model.html#模型定义">官网</a>，留个印象。</p>

<p>这样子我们就可以通过调用getUserList()方法来得到数据对象，现在我们在控制层中，将数据传到界面的手上，途中可以做一些处理，好吧，来看看控制层怎么搞。</p>

<h3 id="section-4">五、编写控制层</h3>

<p>如上图，Controller层的Home目录默认有两个文件，这里成银使用的继承的方式来做，这样对于中小型开发是很有力的，当然结构控制得好，大型开发也同样给力，毫不逊色。IndexController继承于BaseController，BaseController里面基本就初始化，这里我们只需要修改IndexController来实现我们的需求。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Controller</span><span class="p">(</span><span class="s2">&quot;Home/BaseController&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">	<span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class="line">	
</span><span class="line">	<span class="k">return</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">indexAction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">			<span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">		
</span><span class="line">			<span class="kd">var</span> <span class="nx">userModel</span> <span class="o">=</span> <span class="nx">D</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">);</span>
</span><span class="line">			<span class="kd">var</span> <span class="nx">userList</span> <span class="o">=</span> <span class="nx">userModel</span><span class="p">.</span><span class="nx">getUserList</span><span class="p">();</span>
</span><span class="line">		
</span><span class="line">			<span class="c1">//将数据库中的值传入userList变量中</span>
</span><span class="line">			<span class="nx">self</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="s1">&#39;userList&#39;</span><span class="p">,</span> <span class="nx">userList</span><span class="p">);</span>
</span><span class="line">			<span class="c1">//渲染到页面上，默认会渲染index_index.html页面</span>
</span><span class="line">			<span class="nx">self</span><span class="p">.</span><span class="nx">display</span><span class="p">();</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>代码也很好写吧，接下来就是写页面了，再将数据填充进去就完成需求了。</p>

<h3 id="section-5">六、编写界面层</h3>

<p>这里就跟ThinkJS没什么关系了，单纯的就是写页面，最后使用ejs填充数据。目录结构如下图，分别是HTML、CSS、JS代码的目录。</p>

<p><img src="http://p9.qhimg.com/t014fe628ee5bda311d.png" alt="目录结构" /></p>

<p>DOM结构（CSS代码附在文章末尾处了）</p>

<p><img src="http://p4.qhimg.com/t0133963df1689d6611.png" alt="DOM结构" /></p>

<p>哎，hexo编译的时候报错，所以只好截图一张了。</p>

<blockquote>
  <p>不过要注意，引入的CSS和JS文件的相对路径是”resource/xxx/xxx”这样的，也就是说www目录是网站的ROOT目录。</p>
</blockquote>

<p>在这里我们就可以启动ThinkJS项目了，入口文件为：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">www/index.js
</span></code></pre></td></tr></table></div></figure>

<p>所以进入www目录，使用下面的经典命令就可以在网页 <a href="http://127.0.0.1:8360">http://127.0.0.1:8360</a> 中浏览效果了，本例子中得效果就如最开始的那张图一模一样。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">node index.js
</span></code></pre></td></tr></table></div></figure>

<p>如果你还觉得不过瘾，你现在可以再写一个后台管理，实现数据的可视化添加、编辑、删除功能，这样一个简单的系统就已经起来了！很简单是吧，完全感受不到框架的存在，感受不到它的存在就对了，这样就是一个好框架了！^0^</p>

<p>附：本例子中的CSS代码</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nc">.main</span> <span class="p">{</span>
</span><span class="line">	<span class="k">min-height</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class="line">	<span class="n">_height</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class="line">	<span class="k">background</span><span class="o">:</span> <span class="m">#ededed</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.content</span> <span class="p">{</span>
</span><span class="line">	<span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.items</span> <span class="p">{</span>
</span><span class="line">	<span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class="line">	<span class="k">margin-left</span><span class="o">:</span> <span class="m">-20px</span><span class="p">;</span>
</span><span class="line">	<span class="o">*</span><span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class="line">	<span class="o">*</span><span class="n">zoom</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.item</span> <span class="p">{</span>
</span><span class="line">	<span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">160px</span><span class="p">;</span>
</span><span class="line">	<span class="k">margin-left</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.item-link</span> <span class="p">{</span>
</span><span class="line">	<span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class="line">	<span class="k">height</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class="line">	<span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.item-photo</span> <span class="p">{</span>
</span><span class="line">	<span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span>
</span><span class="line">	<span class="k">height</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span>
</span><span class="line">	<span class="k">border</span><span class="o">:</span> <span class="m">3px</span> <span class="k">solid</span> <span class="m">#f5f5f5</span><span class="p">;</span>
</span><span class="line">	<span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.item-username</span> <span class="p">{</span>
</span><span class="line">	<span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class="line">	<span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class="line">	<span class="k">height</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
</span><span class="line">	<span class="k">line-height</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
</span><span class="line">	<span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
</span><span class="line">	<span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class="line">	<span class="k">color</span><span class="o">:</span> <span class="m">#222</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X 10.9配置AMP环境]]></title>
    <link href="http://fegg.github.io/blog/20141126/mac-os-x-10.9-config-amp/"/>
    <updated>2014-11-26T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20141126/mac-os-x-10.9-config-amp</id>
    <content type="html"><![CDATA[<h3 id="section">2015年5月9日更新</h3>

<p>更新内容：针对Mac OS X 10.10.3不能访问用户目录</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">http://localhost/~lulin
</span></code></pre></td></tr></table></div></figure>

<p>检查Apache版本是否升级</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Server version: Apache/2.4.10 <span class="o">(</span>Unix<span class="o">)</span>
</span><span class="line">Server built:   Jan  <span class="m">8</span> <span class="m">2015</span> 20:48:33
</span></code></pre></td></tr></table></div></figure>

<p>修改的地方有以下 3 点：</p>

<p><strong>（1）/etc/apache2/httpd.conf</strong></p>

<p>打开如下配置（去除#注释）</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="apache"><span class="line"><span class="nb">LoadModule</span> authz_core_module libexec/apache2/mod_authz_core.so
</span><span class="line"><span class="nb">LoadModule</span> authz_host_module libexec/apache2/mod_authz_host.so
</span><span class="line"><span class="c"># 这两项是重点检查对象</span>
</span><span class="line"><span class="nb">LoadModule</span> userdir_module libexec/apache2/mod_userdir.so
</span><span class="line"><span class="nb">Include</span> <span class="sx">/private/etc/apache2/extra/httpd-userdir.conf</span>
</span></code></pre></td></tr></table></div></figure>

<p>修改完后访问会出现，所以还需要修改（2）中的文件</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Forbidden
</span><span class="line">You don<span class="err">&#39;</span>t have permission to access /~lulin/ on this server.
</span></code></pre></td></tr></table></div></figure>

<p><strong>（2）/etc/apache2/extra/httpd-userdir.conf</strong></p>

<p>打开如下配置（去除#注释）</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="apache"><span class="line"><span class="nb">Include</span> <span class="sx">/private/etc/apache2/users/</span>*.conf
</span></code></pre></td></tr></table></div></figure>

<p>**（3）修改之前 10.9 中 /etc/apache2/users/<youusername>.conf**</youusername></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="apache"><span class="line"><span class="nt">&lt;Directory</span> <span class="s">&quot;/Users/lulin/Sites/&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	<span class="nb">Options</span> Indexes MultiViews
</span><span class="line">	<span class="nb">AllowOverride</span> <span class="k">None</span>
</span><span class="line">	<span class="nb">Require</span> <span class="k">all</span> granted
</span><span class="line"><span class="nt">&lt;/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="section-1">前言</h3>

<p>因为每次重新安装系统都需要配置一下Apache、MySQL、PHP的环境，网上的文章又不完整或者不完全符合自己的情况，所以写下一篇文章来记录一下，保证99%配置成功，还剩1%由于各种奇葩环境原因。。。主要从 6 个方面进行记录：</p>

<ol>
  <li>启动Apache</li>
  <li>建立个人的网站目录</li>
  <li>启动php的解析功能</li>
  <li>安装、启动mysql</li>
  <li>修改mysql root密码</li>
  <li>使用客户端连接mysql</li>
</ol>

<h3 id="apache">一、启动Apache</h3>

<p>查看Apache的版本信息：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>httpd -v
</span><span class="line">
</span><span class="line">Server version: Apache/2.2.26 <span class="o">(</span>Unix<span class="o">)</span>
</span><span class="line">Server built:   Dec <span class="m">10</span> <span class="m">2013</span> 22:09:38
</span></code></pre></td></tr></table></div></figure>

<p>启动Apache</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo apachectl restart
</span></code></pre></td></tr></table></div></figure>

<p>如果终端中显示：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">org.apache.httpd: Already loaded
</span></code></pre></td></tr></table></div></figure>

<p>就表示已经启动过了，可以使用重启命令：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo apachectl restart
</span></code></pre></td></tr></table></div></figure>

<p>这样我们的准备工作就做完了，第一步不要太复杂，不然配置会混乱，不太好还原之前的状态。接下来访问：</p>

<p><a href="http://localhost">http://localhost</a></p>

<p>如果出现如下图情况，就表示一切顺利，我们再接下去配置，如果没有成功，其实就不推荐再折腾啦，重装系统是最快的解决方案。。。</p>

<!-- more -->

<p><img src="http://p4.qhimg.com/t019a3b13c20aab70a4.png" alt="It works!" /></p>

<blockquote>
  <p>接下来我们来看看为什么吧。</p>
</blockquote>

<ul>
  <li>Apache默认的网站目录：/Library/WebServer/Documents</li>
  <li>默认访问的文件：/Library/WebServer/Documents/index.html.en</li>
</ul>

<p>好吧，这样就很好理解了，我们不需要看Apache的配置文件，这样只会让配置变得复杂。</p>

<p>当然，配置好啦之后，我们就应该了解为什么是这个目录，现在可以使用快捷键(shift+command+G)打开对应目录(有界面还是尽量使用可视化操作，会让你更加专注的学习正在配置的东西)：</p>

<blockquote>
  <p>/etc/apache2</p>
</blockquote>

<p>你会发现有一个：httpd.conf 文件，这个文件里面就配置了默认的网站目录，你可以使用sublime text等编辑器(使用编辑器可以更好的处理权限等问题)查找“/Library/WebServer/Documents”，一看就明白了。</p>

<p>OK，现在上面的入门配置好啦，接下来就需要在/Users/<yourname>下配置自己的网站目录，你可能要问为什么，首先，使用默认的目录不是程序员的范，其次就是那个目录的权限太高，每次修改内容都需要使用sudo权限，不太方便。</yourname></p>

<h3 id="section-2">二、建立个人的网站目录</h3>

<p>首先，需要在你的个人目录下面创建一个Sites目录（为什么叫这个名字呢？可以google一下，是有故事的，这里就不多描述了，单纯的先把成果搞出来），网上教使用：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>mkdir Sites
</span></code></pre></td></tr></table></div></figure>

<p>这种方式来创建目录，这里必须要说一下，既然你用的Mac OS X可视化系统，需要这么复杂吗？右键，新建文件夹，就OK。</p>

<p>接下来我们就需要修改一些配置了：</p>

<ul>
  <li>搞一个自己的配置文件，放入：/etc/apache2/users，比如我的配置</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">/etc/apache2/users/lulin.conf
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>提升你对该配置文件的权限，这个用终端瞬间秒杀</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo chmod <span class="m">755</span> /etc/apache2/users/lulin.conf
</span><span class="line">//验证一下修改正确没有，首先验证lulin.conf文件，其次验证/etc/apache2/users这个目录的权限，不然遇到蛋疼的时候没头绪
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> /etc/apache2/users <span class="o">&amp;&amp;</span> ls -la
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> .. <span class="o">&amp;&amp;</span> ls -la
</span></code></pre></td></tr></table></div></figure>

<p>显示如下图情况就表示没问题了：</p>

<p><img src="http://p3.qhimg.com/t0146e8cad6473dccfd.png" alt="验证权限" /></p>

<p>最后需要配置一下”/etc/apache2/users/lulin.conf”这个conf文件，使用sublime text打开加入内容如下：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="apache"><span class="line"><span class="nt">&lt;Directory</span> <span class="s">&quot;/Users/lulin/Sites/&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	<span class="nb">Options</span> Indexes MultiViews
</span><span class="line">	<span class="nb">AllowOverride</span> <span class="k">All</span>
</span><span class="line">	<span class="nb">Order</span> allow,deny
</span><span class="line">	<span class="nb">Allow</span> from <span class="k">all</span>
</span><span class="line"><span class="nt">&lt;/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>改了配置嘛，不管怎么，要我们的环境保证是修改后的结果，就重启一下Apache吧。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo apachectl restart
</span></code></pre></td></tr></table></div></figure>

<p>输入访问地址：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">http://localhost/~lulin/
</span></code></pre></td></tr></table></div></figure>

<blockquote>
  <p>如果出现权限问题，那么可以查看一下“/etc/apache2/users/lulin.conf”这里的文件权限是否正确。</p>
</blockquote>

<p><img src="http://p8.qhimg.com/t01bd67e9b3dc1099bc.png" alt="个人网站目录" /></p>

<p>这样个人的自定义目录也搞定了，接下我们如果想访问php文件的话就还需要一点简单配置，不然的话php文件会被当做普通文本来解析，离成功不远啦。</p>

<h3 id="php">三、启动php的解析功能</h3>

<p>使用快捷键直接定位到配置文件：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">/etc/apache2/httpd.conf
</span></code></pre></td></tr></table></div></figure>

<p>打开后只需要去除一句话的注释即可搞定，使用编辑器来搜索吧，so easy!（去除前面的#号即可，这就是conf的特性而已）</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="apache"><span class="line"><span class="nb">LoadModule</span> php5_module libexec/apache2/libphp5.so
</span></code></pre></td></tr></table></div></figure>

<p>接下来老规矩，保证不踩坑，重启一下Apache。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo apachectl restart
</span></code></pre></td></tr></table></div></figure>

<p>写一个简单的php文件测试一下配置结果，这次我们把php文件建在我们个人的网站目录”/Users/lulin/Sites”吧。</p>

<ul>
  <li>新建一个 index.php 页面，Apache会默认解析index.php</li>
  <li>敲入简单代码，别偷懒，敲完整哦，不然万一你的某个配置没开就踩坑里了：</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line">	<span class="k">echo</span> <span class="nb">phpinfo</span><span class="p">();</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

<p><img src="http://p9.qhimg.com/t0120bef7ecbe5b7f46.png" alt="PHP经典页面" /></p>

<p>显示下面经典测试php的页面，即OK。</p>

<h3 id="mysql">四、安装、启动mysql</h3>

<p>安装去官网下载一份就行，我这里下载的版本是：mysql-5.6.21-osx10.9-x86_64.dmg</p>

<blockquote>
  <p>建立下载dmg文件，安装方便，会默认建立软连接等东西。</p>
</blockquote>

<p>安装完后，我们先找到安装的mysql，这样方便以后配置，简单的查看目录就在：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">//软连接
</span><span class="line">/usr/local/mysql
</span><span class="line">//真实目录
</span><span class="line">/usr/local/mysql-5.6.21-osx10.8-x86_64
</span></code></pre></td></tr></table></div></figure>

<p>安装的详情可以查看官方说明，我找了很多资料发现还是官方比较直观。</p>

<p><a href="http://dev.mysql.com/doc/refman/5.6/en/macosx-installation-pkg.html">MySQL安装官网</a></p>

<p>不过官网更新不是特别快，其中的安装默认启动项已经在我安装的版本不需要自己搞了，已经有了，可以查看【系统偏好设置查看】，安装MySQL后默认是关闭的，我们也进去启动一下。</p>

<p><img src="http://p0.qhimg.com/t014982da363f4740a8.png" alt="入口" /></p>

<p><img src="http://p3.qhimg.com/t01a64f1284d81b06e7.jpg" alt="MySQL启动配置" /></p>

<p>现在依然在终端输入：mysql 命令还不能识别到命令，我们需要配置环境变量，这个在终端下面好弄一点，我们就采用命令的方式修改：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo vim ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>

<p>在.bash_profile文件中加入MySQL的可执行目录：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/usr/local/mysql/bin:$PATH&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>最后刷新一下配置：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>

<p>接下来我们就可以在终端之间输入：mysql 命令就能够以非root用户登录了。</p>

<p>现在MySQL环境搭建完成，要正常使用我们需要配置root用户，默认root用户的密码是空值，实际使用肯定需要修改一下。</p>

<h3 id="mysql-root">五、修改mysql root密码</h3>

<p>网上介绍了很多方法，我觉得最直接，最快速的方法是使用空密码，以root用户的身份登录进入MySQL控制台，然后再去更新密码即可。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>mysql -u root -p
</span><span class="line"><span class="nv">$ </span>直接回车登录
</span><span class="line">//下面模拟MySQL控制台
</span><span class="line">//因为是在MySQL下，所以SQL关键字采用小写更方便，如果你是Oracle的话还是推荐都是用大写
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="n">mysql</span> <span class="o">&gt;</span> <span class="k">show</span> <span class="n">databases</span><span class="p">;</span> <span class="o">//</span><span class="err">看一下所有数据是否齐全</span>
</span><span class="line">		<span class="o">&gt;</span> <span class="n">use</span> <span class="n">mysql</span><span class="p">;</span> <span class="o">//</span><span class="err">切换到</span><span class="n">mysql</span><span class="err">库</span>
</span><span class="line">		<span class="o">&gt;</span> <span class="k">update</span> <span class="k">user</span> <span class="k">set</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">(</span><span class="s1">&#39;lulin&#39;</span><span class="p">)</span> <span class="k">where</span> <span class="k">user</span><span class="o">=</span><span class="s1">&#39;root&#39;</span><span class="p">;</span>
</span><span class="line">		<span class="o">&gt;</span> <span class="n">flush</span> <span class="k">privileges</span><span class="p">;</span> <span class="o">//</span><span class="err">一定要记住刷新权限，不然修改密码不生效</span>
</span><span class="line">		<span class="o">&gt;</span> <span class="n">exit</span><span class="p">;</span> <span class="o">//</span><span class="err">退出，使用修改后的密码重新登录，确定是否修改成功</span>
</span></code></pre></td></tr></table></div></figure>

<p>现在MySQL的配置基本上结束了，更多的配置可以配置my.cnf，在windows下是my.ini，都是其他文件重命名的，这个可以google查阅到详细配置。</p>

<h3 id="mysql-1">六、使用客户端连接mysql</h3>

<p>上面的配置结束啦，我们不可能每次都在MySQL控制台搞吧，效率太low，这里我介绍几个客户端：</p>

<ul>
  <li>Mac OS X平台</li>
</ul>

<p><strong>Querious</strong></p>

<p>这个使用过一段时间，需要收费，不太好破解官方出的最新版本，不过还挺好用，这里我就不用了，找个免费的用用。</p>

<p><strong>Sequel Pro</strong></p>

<p>下载地址：<a href="http://www.sequelpro.com/download">http://www.sequelpro.com/download</a></p>

<p>可能被墙访问有点慢，我就将最新版放入了360云盘，大家可以去下。</p>

<p>云盘地址：<a href="http://yunpan.cn/cA5FY26fdqTsm">http://yunpan.cn/cA5FY26fdqTsm</a> （提取码：b343）</p>

<p>使用就so easy啦，Sequel Pro 配置如下图：</p>

<p><img src="http://p2.qhimg.com/t0172923d750ff38455.png" alt="Sequel Pro 连接MySQL" /></p>

<p>记得把常用连接加入收藏就行，不然每次都要输来输去，Host建立使用127.0.0.1，原因可以google，不过Querious之前我用的时候输入localhost会默认转换成127.0.0.1，还比较人性化。</p>

<ul>
  <li>Windows平台</li>
</ul>

<p>只推荐一款利器，用过很多，没有之一，就它最好用：</p>

<p><strong>navicat for mysql</strong></p>

<p>这个客户端是收费的，不过如果你使用的时8.0版本，在baidu搜索：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">navicat <span class="k">for</span> mysql 注册码
</span></code></pre></td></tr></table></div></figure>

<p>关键字，第一个搜索结果里面就有注册码。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[骑行－雁栖湖游记]]></title>
    <link href="http://fegg.github.io/blog/20140919/yanxihu/"/>
    <updated>2014-09-19T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140919/yanxihu</id>
    <content type="html"><![CDATA[<p>路程：来回110公里</p>

<p>时间：2014年9月20日</p>

<p>我、智杰、成银、肆爷、文武、文成、孟孟（7人）</p>

<hr />

<h3 id="section">1. 景点简介</h3>

<p>雁栖湖，是位于北京市怀柔区北部北台上村的水库，拦截雁栖河，北临雄伟的万里长城，南偎一望无际的华北平原。雁栖湖水面宽阔，湖水清澈，每年春秋两季常有成群的大雁来湖中栖息，故而得名。</p>

<h3 id="section-1">2. 出发前的集合</h3>

<p>跟之前约好的一样，早上9点到公司集合出发。大家像打了鸡血一样吃完了早餐，摆好了出发的架势准备出发，在出发前文成比较有经验，还教我们一些骑行中要用到的常用手势，感觉很专业的样子^0^</p>

<!-- more -->

<p><img src="http://p1.qhimg.com/t01fc37c85fef53360e.jpg" alt="大家的'宝马'" /></p>

<p><img src="http://p2.qhimg.com/t01e8be3b0735e82792.jpg" alt="大家的'宝马'" /></p>

<p>最开始起步大家都像打了鸡血一样…从最开始自由的骑行到最后排成一条线，感觉就是一个小骑行队在前进，在骑行途中还有其他队跟我们打招呼呢，喊小伙子加油，哈哈！</p>

<p><img src="http://p7.qhimg.com/t012456da4e267c15aa.jpg" alt="骑行队伍" /></p>

<p><img src="http://p1.qhimg.com/t01abe54a9ae9f26d89.jpg" alt="骑行队伍" /></p>

<h3 id="section-2">3. 别具风味的午餐</h3>

<p>我们骑到的时候大楷就1点多了，准备找一个点吃饭，要到雁栖湖的地方饭店还真的多，最后我们选择了一家看上去比较休闲一点的地方吃饭，0_0 很有情调吧～</p>

<p><img src="http://p4.qhimg.com/t0170b4481a74be8efc.jpg" alt="风味午餐" /></p>

<p>不过遇到一个好耍的老爷子，对白是这样子的：</p>

<p>他：“小伙子们，你们现在是骑回去还是刚骑到？”</p>

<p>我们：“刚骑到。”</p>

<p>他：“从哪儿开始骑的？”</p>

<p>我们：“大楷是酒仙桥。”</p>

<p>他：“我也是酒仙桥，刚到～”</p>

<p>＝＝他好像是走路来的，我们还以为碰到神仙啦…这步行速度，像“神行太保”，有木有～有木有！！！</p>

<h3 id="section-3">4. 美丽的雁栖湖</h3>

<p>经过辛苦的骑行，终于到啦雁栖湖门口，我们四辆机油车要牢牢的在一起，哈哈～不过为什么我的车被两把锁给锁住啦…</p>

<p><img src="http://p9.qhimg.com/t01449f900c6e1b04b8.jpg" alt="机油车" /></p>

<p><img src="http://p9.qhimg.com/t010f6d54e443b5cce1.jpg" alt="雁栖湖门口" /></p>

<p>到啦就先来个集体照吧，可以暂时歇个脚了，骑行后的放松，大家都好high心的样子～</p>

<p><img src="http://p7.qhimg.com/t013aa7d0210b6ad279.jpg" alt="集体照" /></p>

<p><img src="http://p1.qhimg.com/t012ac7958e709c0e1b.jpg" alt="大黄鸭" /></p>

<p>大家看到那只小黄鸭了吗？明明是小黄鸭，立的是大黄鸭的牌坊 ＝＝</p>

<p><img src="http://p4.qhimg.com/t01e455618c512f9e10.jpg" alt="大黄鸭" /></p>

<p>回家途中饿了就是士力酱，补充体能继续上路，我们的目标是公司对面的黄焖鸡 @…@ 就这点追求了～</p>

<p><img src="http://p4.qhimg.com/t01d8167ce092f32f98.jpg" alt="士力酱" /></p>

<p><img src="http://p4.qhimg.com/t017da9805e7a739bbf.jpg" alt="那些年" /></p>

<p>有木有像那些年，那些年，我们的青春永不止步！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[强大的Makefile]]></title>
    <link href="http://fegg.github.io/blog/20140802/power-by-makefile/"/>
    <updated>2014-08-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140802/power-by-makefile</id>
    <content type="html"><![CDATA[<h3 id="make-">一、make 规则</h3>

<pre><code>Target: Dependencies
	&lt;TAB&gt;Commands
</code></pre>

<p>例子：</p>

<pre><code>main.o: main.c common.c common.h
	gcc -c main.c
</code></pre>

<h3 id="makefile-">二、建立 Makefile (这里不带后缀名，并且根据习惯首字母大写)</h3>

<p>输入以下内容：</p>

<pre><code>clean: 
	@echo hello
	echo hello
</code></pre>

<p>ps:
在终端输入命令：make clean 执行（但是需要在Makefile的同级目录）
如果是在windows环境下，你也可以使用nmake进行测试，但是我相信在windows就不用这种方式了。
1. clean: 定义执行的make的命令。
2. @echo: 直接输出“hello”字符串，但是不打印代码。
3. echo: 输出“hello”字符串，并且打印代码。</p>

<p>执行结果如下：</p>

<!--more-->

<p><img src="http://fegg.github.io/images/post/make1.png" alt="Mou icon" /></p>

<h3 id="makefile-c">三、通过 Makefile 去编译并且执行C语言代码</h3>

<p>(1) 首先创建main.c源代码文件，这个不难。</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
	printf("-----------\n");
	printf("hello\n");
	printf("-----------\n");
}
</code></pre>

<p>(2) 创建我们需要的Makefile文件，内容如下。</p>

<pre><code>targets = main

$(targets): main.c 
	gcc main.c -o main.o
	./main.o

clean:
	rm *.o
</code></pre>

<p>ps: 这里出现了新语法：变量定义
变量的声明–&gt; targets = main.o
引用变量–&gt; $(targets)
等价于：</p>

<pre><code>main: main.c 
	gcc main.c -o main.o
	./main.o

clean:
	rm *.o
</code></pre>

<p>(3) 执行效果。</p>

<p><img src="http://fegg.github.io/images/post/make2.png" alt="Mou icon" /></p>

<p>ps: 这里执行了make &amp;&amp; make clean（等价于：make main &amp;&amp; make clean）
1. make不带参数，默认执行第一条命令。
2. &amp;&amp;：左边命令执行成功，就执行右边的命令（和程序中的&amp;&amp;是一样的效果）。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Npm 详解（2）]]></title>
    <link href="http://fegg.github.io/blog/20140802/node-npm-detail-2/"/>
    <updated>2014-08-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140802/node-npm-detail-2</id>
    <content type="html"><![CDATA[<p>安装Node和npm前半部分的配置可以参考之前我的两篇文章：</p>

<ol>
  <li><a href="http://blog.51yuekan.com/2014/10/08/2014-08-02-hello-nodejs/">Hello Node</a></li>
  <li><a href="http://blog.51yuekan.com/2014/10/08/2014-08-02-node-npm-detail-1/">Node npm 详解（1）</a></li>
</ol>

<h3 id="section">四、本地模式和全局模式</h3>

<p>如果你了解环境变量里面的，用户变量和系统变量。可以做一个类比进行理解。当然，windows上面的环境变量概念比较好理解。</p>

<!-- more -->

<h4 id="section-1">1. 本地模式</h4>

<p>本地模式下安装包的特点</p>

<ul>
  <li>不会写入PATH变量（也就是环境变量，无法在全局引用该安装包，不能在终端直接使用）</li>
  <li>能够在不同的node_modules目录，安装不同版本的安装包</li>
  <li>能够通过require()来引入安装包</li>
</ul>

<p>使用“npm install <pkg>[@<version>]”安装的包，默认会安装在当前目录的“node_modules”目录下（如果没有该目录，在执行命令的时候，会自动帮你创建）。</version></pkg></p>

<pre><code>//专业的写法
./node_modules
</code></pre>

<p>（1）默认采用本地模式安装</p>

<pre><code>npm install &lt;pkg&gt;
</code></pre>

<p>（2）信息写入package.json文件</p>

<pre><code>npm install &lt;pkg&gt; --save
</code></pre>

<p>这个命令在安装包的同时，将信息写入package.json。</p>

<blockquote>
  <p>@version表示指定安装包的版本号，是可选项目，默认安装最新版本。</p>
</blockquote>

<blockquote>
  <p>项目路径中如果有package.json文件，使用npm install方法就可以根据dependencies配置安装所有的依赖包。</p>
</blockquote>

<blockquote>
  <p>如果这样配置，当代码提交到github时，就不用提交node_modules这个文件夹。</p>
</blockquote>

<h4 id="section-2">2. 全局模式</h4>

<p>全局模式安装包的特点</p>

<ul>
  <li>不需要重复安装</li>
  <li>不能使用require()引入</li>
  <li>会写入PATH，并建立软链接，使用命令行的方式使用</li>
  <li>不方便指定特定的版本运行</li>
</ul>

<p>（1）采用全局模式安装</p>

<pre><code>npm install -g &lt;pkg&gt;
</code></pre>

<p>（3）在mac中全局的目录</p>

<pre><code>//安装包所在目录
/usr/local/lib/node_modules/
//运行命令的软链接所在目录
/usr/local/bin
</code></pre>

<p>（4）查看安装包路径</p>

<pre><code>//查看当前包的安装路径
npm root
//查看全局的包的安装路径
npm root -g
</code></pre>

<p>（5）设置全局模式安装目录</p>

<pre><code>//设置后，以全局模式将会安装在此目录中，不过需要手动加入PATH，切记
npm config set prefix &lt;global dir&gt;
//设置npm缓存文件的存放路径
npm config set cache &lt;cache dir&gt;
</code></pre>

<p>（6）查看默认模式</p>

<pre><code>//默认返回：false    
$ npm get global
$ npm config get global
</code></pre>

<p>（7）设置为默认以全局模式安装，就不用每次加”-g”参数啦。</p>

<pre><code>$ npm set global=true
$ npm config set global=true
</code></pre>

<blockquote>
  <p>npm set / npm config set与npm get / npm config get的区别和联系单独写吧。其实不难，只是需要实验才能得出结果，这里区别很细节。</p>
</blockquote>

<blockquote>
  <p>准备把文章拆分成几篇，写得详细了一点，这里写的话篇幅就太长了。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Npm 详解（1）]]></title>
    <link href="http://fegg.github.io/blog/20140802/node-npm-detail-1/"/>
    <updated>2014-08-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140802/node-npm-detail-1</id>
    <content type="html"><![CDATA[<h3 id="npm">一、npm简介</h3>

<p>安装npm请阅读我之前的文章<a href="http://blog.51yuekan.com/2014/10/08/2014-08-02-hello-nodejs/">Hello Node</a>中npm安装那一部分，不过只介绍了linux平台，如果是其它平台，有<a href="http://www.infoq.com/cn/articles/nodejs-npm-install-config">前辈</a>写了更加详细的介绍。</p>

<p>npm的全称：Node Package Manager.</p>

<h4 id="section">（1）通俗的理解</h4>

<p>其实从字面意思就可以理解这个产品有什么作用翻译为“Node包管理器”。对，就是Node的包的一个管理工具，目前我尝试的有</p>

<ol>
  <li>下载并安装包（npm install [pkg]）</li>
  <li>升级安装包（npm update [pkg]）</li>
  <li>卸载安装包（npm uninstall/rm [pkg]），可以指定卸载包的版本号
…</li>
</ol>

<p>其实这些命令很简单，常用的必须记住，不常用的查询即可，这才是比较好的学习知识方式。</p>

<!-- more -->

<p>在终端输入：</p>

<pre><code>//查看npm拥有的全部命令
$ npm --help
$ npm help
//查看某一个npm命令的详细用法
$ npm &lt;command&gt; --help
$ npm help &lt;command&gt;
</code></pre>

<h4 id="section-1">（2）专业的解释</h4>

<p>npm（Node Package Manager）是Node.js下的主流套件管理程式。它在Node.js v0.6.x版本之后，内建于Node系统。通过npm可以协助开发者安装、卸载、删除、更新Node.js套件，并且可以通过npm发布自己的插件。</p>

<h3 id="section-2">二、类似的产品</h3>

<p>其实学习一个产品，可以联系其它产品，能够更好的理解现在手头的产品。第一次学习npm我的第一反应就是，很像linux/mac平台的很多软件，依赖管理的方式可以参考maven…当然相似性可以随便联想。</p>

<p>接下来，举几个例子吧，当然详细了解可以查baidu &amp;&amp; google。</p>

<ol>
  <li>gem</li>
  <li>PyPL</li>
  <li>pear</li>
  <li>macPort</li>
  <li>Homebrew</li>
  <li>rem</li>
  <li>apt-get</li>
  <li>yum
…</li>
</ol>

<p>是不是很多都很熟悉？这样对于npm的认识就不用局限于概念啦。</p>

<h3 id="npm-1">三、npm基础功能</h3>

<h4 id="npmrc">（1）npmrc文件介绍</h4>

<p>首先介绍一下npmrc文件，这个文件是npm包管理器的配置文件。</p>

<p>与npmrc相关的三个文件：</p>

<ol>
  <li>用户配置文件：~/.npmrc</li>
  <li>全局配置文件：$PREFIX/npmrc</li>
  <li>npm内部配置文件：安装npm的目录下</li>
</ol>

<p>下面仔细看一下npm config的配置。</p>

<h4 id="npm6">（2）npm获取配置的6种方式（优先级从高到低）：</h4>

<p>1.命令行参数</p>

<pre><code>$ --proxy http://&lt;server&gt;:&lt;port&gt;
</code></pre>

<p>2.环境变量</p>

<p>以”npm_config_“为前缀的环境变量将会被认为是npm的配置属性。
像Maven镜像的概念，方便通信吧。</p>

<pre><code>$ npm_config_proxy=http://&lt;server&gt;:&lt;port&gt;
</code></pre>

<p>3.用户配置文件</p>

<pre><code>//查看文件路径
$ npm config get userconfig

//mac系统默认路径
$HOME/.npmrc
</code></pre>

<p>4.全局配置文件</p>

<pre><code>//查看文件路径
$ npm config get globalconfig

//mac系统默认路径
/usr/local/etc/npmrc
</code></pre>

<blockquote>
  <p>3，4中输入终端的效果如图：</p>
</blockquote>

<p><img src="http://fegg.github.io/images/post/node-npm/node-npm-3-and-4.png" alt="3，4在终端的结果" /></p>

<p>5.内置配置文件</p>

<p>安装npm的目录下的npmrc文件。</p>

<p>6.默认配置</p>

<p>如果前5条均未设置，npm会使用默认配置参数。</p>

<h4 id="npm-install-pkg-name">（4）npm install <pkg name=""></pkg></h4>

<p>“安装指定包”：这个命令不难，但是也有需要注意的地方，就是安装的模式有两种，在后面会单独讲解。</p>

<blockquote>
  <p>如果不知道包的具体名称，可以在<a href="http://search.npmjs.org">http://search.npmjs.org</a>上进行搜索。</p>
</blockquote>

<h4 id="npm-uninstall-pkg-name">（5）npm uninstall <pkg name=""></pkg></h4>

<p>“卸载指定包”：在help的时候，会给你推荐npm rm <pkg name="">这个命令，uninstall会卸载掉包的依赖，rm。</pkg></p>

<h4 id="npm-ls">（6）npm ls</h4>

<p>查看安装的包清单，其实和linux的ls命令很像，可以跟很多参数，详情可以使用</p>

<pre><code>$ npm help ls
</code></pre>

<h4 id="npm-search-pkg-name">（7）npm search <pkg name=""></pkg></h4>

<p>搜索包的详细信息，比如我们搜索express试试。第一次搜索，会提示建立索引，需要耐心等待片刻，大家测试的时候不要就关掉啦终端。</p>

<pre><code>npm WARN Building the local index for the first time, please be patient
</code></pre>

<p><img src="http://fegg.github.io/images/post/node-npm/node-npm-search.png" alt="express包的搜索结果" /></p>

<p>其实看上去复杂，只是东西有点大，不过主要包含以下6个部分：</p>

<ol>
  <li>名称</li>
  <li>描述</li>
  <li>作者</li>
  <li>发布时间</li>
  <li>发布版本号</li>
  <li>关键字</li>
</ol>

<h4 id="npm-update-pkg-name">（8）npm update <pkg name=""></pkg></h4>

<p>更新安装的包</p>

<p>更多API可以查看官网：<a href="https://npmjs.org/doc/">https://npmjs.org/doc/</a></p>

<h3 id="section-3">四、版本号的知识。</h3>

<p>在node.js中的package.json配置文件中，我们需要配置版本号，比如0.1.2</p>

<p>第一位数字：主版本号</p>

<p>第二位数字：子版本号</p>

<p>第三位数字：补丁版本号</p>

<p>找到一个不错的介绍软件项目版本号的文章</p>

<p><a href="http://www.cnblogs.com/sdjxcolin/archive/2007/07/02/803376.html">软件项目版本号的命名规则及格式</a></p>

<p>为什么要解释这个呢？肯定是有用，因为npm安装的时候是可以选择版本号的，有点理解会比较好吧，至少我是这么认为的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Install]]></title>
    <link href="http://fegg.github.io/blog/20140802/mongodb-install/"/>
    <updated>2014-08-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140802/mongodb-install</id>
    <content type="html"><![CDATA[<h3 id="section">一、前言</h3>

<p>其实之前还未接触nosql类型，我觉得这项技术应该是值得学习和研究的。如果读者有扎实的Linux基础和MySQL等知识，那么配置mongodb应该是比较容易的。下面我们按照步骤来吧。</p>

<h3 id="section-1">二、下载需要的安装包</h3>

<p>我是第一次配置mongodb，没有像redmine这个软件一样有太多依赖，直接下载即可，这里我下载的2.2.x版本（注意系统版本），比较新。</p>

<p><a href="http://www.mongodb.org/downloads">Mongodb下载</a></p>

<!-- more -->

<h3 id="section-2">三、建立良好的目录（所有软件配置的重点）</h3>

<ol>
  <li>不应该有空格（好的情况是被转义，坏的情况会出现错误，不好发现）</li>
  <li>目录结构不要太深（有时候需要命令操作，麻烦，也许还有其它坏处吧，这是经验之谈）</li>
  <li>见名知意（这个和code命名一样，不解释啦吧）</li>
</ol>

<p>下载完安装包后，直接解压，将根目录改为：”mongodb”，以下是目录截图。</p>

<p><img src="http://fegg.github.io/images/post/mongodb-install-1.png" alt="Mou icon" /></p>

<p>但是在mac或者linux上面安装不需要那么麻烦，只要你有包集成软件，很方便，这也是为什么我喜欢mac或者linux的原因。</p>

<pre><code>brew update
brew install mongodb
</code></pre>

<p>不过brew需要读者自己安装哦。</p>

<h3 id="section-3">四、建立数据存储、操作日志常用文件夹</h3>

<p>如上图中，我建立了：</p>

<pre><code>data/db
log/mongodb.log
</code></pre>

<p>如果你调用的是有读写权限的目录，那么你需要手动开启权限哦，chown命令即可。</p>

<p>建立好之后，我们启动mongodb会在data/db目录下产生一些文件，最开始我们不需要关心，mongodb.log是记录日志的文件（在mac终端可以利用touch命令创建文件，其实这点确实没有windows方便），对于维护很重要。其实这些和mysql能够找到相似的地方，不信大家可以翻开mysql安装目录结构看一看哦。</p>

<h3 id="section-4">五、建立配置文件</h3>

<p>mongodb默认没有提供conf配置文件，如果你要问我为什么知道。。。其实我也是猜的，数据库配置文件，mysql–&gt;.ini，svn版本管理软件–&gt;.conf，你只需要尝试一下，看能够识别不就能够知道，但是最后确认还是去官方文档确认的，这里只是说一说当没有文档的时候，我们可以用这种方式来做配置。</p>

<p>配置文件名称：</p>

<pre><code>mongodb.conf
</code></pre>

<p>其中写入：</p>

<pre><code>dbpath=../data/db
logpath=../log/mongodb.log
logappend=true
</code></pre>

<p>上面参数的意思，其实从字面上就能够理解了。</p>

<ol>
  <li>datapath： data文件的存放路径（根据自己的实际情况）</li>
  <li>logpath：同理，log文件的路径（根据自己的实际情况）</li>
  <li>logappend：log是追加，还是覆盖的方式，我们这里最好用追加吧，好观察。</li>
</ol>

<h3 id="mongodb">六、启动mongodb</h3>

<p>启动很简单，但是很容易忘记一件事情，就是非install方式，会忘记配置环境变量，环境变量的配置我在之前文章<a href="http://60sky.com/blog/2014/01/11/mac-svn-update/">Mac环境下SVN升级详解</a>中有介绍。这里我们还是进入mongodb的bin目录进行操作，保证不错才是王道。</p>

<p>终端启动命令如下：</p>

<pre><code>./mongod -f ../mongodb.conf 
</code></pre>

<p>这里你必须指定-f参数，紧跟conf文件路径（根据你的存放位置，我的位置如上图），不然就会按照默认方式，出现不能发现文件的问题，因为我没有建，嘿嘿。</p>

<h3 id="section-5">七、配置验证（搞配置的必要环节）</h3>

<p>如果终端输出以下内容即安装成功：</p>

<pre><code>$ ./mongod -f ../mongodb.conf 
all output going to: ../log/mongodb.log
</code></pre>

<p>如果你没有指定log文件，log的信息会打印到终端，这里我们指定了，看起来也清晰，就在log文件中，读者可以打开看看。</p>

<p>我们再进入mongodb输入点命令试试，很简单，输入1＋1就行，它会给你执行结果 2，好玩。（不过不要关掉你启动的窗口哦，当然也有后台模式，读者可以google一下，只是一条命令）</p>

<p>进入mongodb的命令：</p>

<pre><code>$ ./mongo
</code></pre>

<p>执行后输出的内容（1+1是我自己输入的）：</p>

<pre><code>MongoDB shell version: 2.2.2
connecting to: test
&gt; 1+1
2
&gt; 
</code></pre>

<p>得到以上结果，恭喜你，已经安装完毕了，尽情的玩吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac SVN Update]]></title>
    <link href="http://fegg.github.io/blog/20140802/mac-svn-update/"/>
    <updated>2014-08-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140802/mac-svn-update</id>
    <content type="html"><![CDATA[<h3 id="section">一、前言</h3>

<p>由于svn server版本是1.6.x的原因，Mac自带的svn client是1.6.x，当连接svn server的时候出现版本过低等问题，所以需要把svn client升级要1.7.x或者1.8.x，以下就是将svn client升级到1.8.1的过程。</p>

<h3 id="svn">二、下载SVN源代码包（采用源代码安装的方式）</h3>

<p>下载地址：</p>

<pre><code>http://subversion.apache.org/download/#recommended-release
</code></pre>

<p><em>注意</em>
需要下载：subversion-1.8.1.tar.gz
因为zip里面缺少一些东西，他们两个还是有差别的，具体见google。
下载后解压到Mac的盘即可（不需要命令了，用解压软件就可以了）</p>

<h3 id="svn-1">三、构建并安装SVN</h3>

<p>解压后SVN的目录，其中安装需要的文件被圈出。</p>

<!--more-->

<p><img src="http://fegg.github.io/images/post/mac-svn1.png" alt="Mou icon" /></p>

<p>如果熟悉linux的朋友，接下来的事情就很简单了。
根据解压的情况</p>

<pre><code>cd /Applications/Java/subversion-1.8.1
./configure
make
sudo make install
</code></pre>

<p>这里会等待一段时间…如果没出现error就继续，warn问题不大。
其实svn client 1.8.1已经安装完毕，因为path还没有设置，在终端输入</p>

<pre><code>svn --version
</code></pre>

<p>出现的版本依然是1.6.x，所以，请继续往下看。</p>

<h3 id="svnpath">四、配置SVN的PATH</h3>
<p>在这里，介绍以下Mac的path（老手就可以跳过了）
首先可以查看一下PATH</p>

<pre><code>$PATH
</code></pre>

<p>你可以临时在当前终端中输入</p>

<pre><code>export PATH=/usr/local/bin:$PATH
</code></pre>

<p>来设置当前需要使用的SVN版本。
你也可以永久让上面的命令生效，就是写入.bash_profile</p>

<pre><code>echo "export PATH= /usr/local/bin:$PATH" &gt;&gt; ~/.bash_profile
</code></pre>

<p>如果学习过PHP，应该不会陌生，就是把</p>

<pre><code>echo "export PATH= /usr/local/bin:$PATH"
</code></pre>

<p>输出打印到~/.bash_profile中.</p>

<h3 id="section-1">五、检验配置结果</h3>

<p><img src="http://fegg.github.io/images/post/mac-svn2.png" alt="Mou icon" /></p>

<h3 id="section-2">六、参考网址</h3>

<p>出于素质，附上牛人的连接。</p>

<p>http://jason.pureconcepts.net/2012/10/updating-svn-mac-os-x/</p>

<p>http://www.cnblogs.com/xitang/archive/2011/09/15/2177924.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网页的钥匙：HTML/XHTML]]></title>
    <link href="http://fegg.github.io/blog/20140802/key-pages-html/"/>
    <updated>2014-08-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140802/key-pages-html</id>
    <content type="html"><![CDATA[<h3 id="web">一、web标准的重要性以及好处</h3>

<ol>
  <li>可以交付到更多的用户代理，也就是可以更好的适应多种浏览网页的容器。</li>
  <li>能够改善性能，也就是可以利用更少的代码实现相同的功能。</li>
  <li>更能够适合浏览器，对于兼容早期浏览器作出的努力更少。</li>
  <li>分离内容和表现。</li>
  <li>能够构建流动式（自适应的）页面。</li>
  <li>流水线式生产，可以让内容和表现的开发分开进行，并且能够无缝地衔接起来。</li>
  <li>使内容具有可访问性。</li>
  <li>减轻维护代码的负担。</li>
  <li>代码可以更好的适应未来。</li>
  <li>…</li>
</ol>

<h3 id="xhtml">二、XHTML的理解</h3>

<p>在学习XHTML前应该先学习XML的基础知识，这样XHTML理解起来更加容易。</p>

<!--more-->

<p>重要概念</p>

<p>DTD (Document Type Definition):  文档类型定义（详情：百度或者谷歌）。</p>

<p>XHTML标记的九大规则</p>

<h4 id="doctype">1. 声明DOCTYPE</h4>

<pre><code>3种主要标记类型

1) 严格型(Strict) : 所有标记必须符合XHTML标准。

exp : 
	
	&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt; 

2) 过渡型 : 可以兼容之前的HTML代码。

exp : 

	&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	  "http://www.w3.org/TR/html4/loose.dtd"&gt;
	  
3) 框架型 : 可以兼容XHTML不推荐的框架。

exp : 

	&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN"
	  "http://www.w3.org/TR/html4/frameset.dtd"&gt;
</code></pre>

<h4 id="xml--dtdxhtml">2. 声明XML命名空间 : 处理相应的DTD中，包含哪些已经定义的有效的XHTML标签。</h4>

<pre><code>	&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
</code></pre>

<h4 id="section">3. 声明内容类型 : 出现在文档头部，其实可以想成设置内容编码。</h4>

<pre><code>	&lt;meta http-equiv="Content-type" content="text/html; charset=iso-8859-1" /&gt;
	
这里如果你考虑HTML5标准，推荐：
	
	&lt;meta charset="utf-8" /&gt;
</code></pre>

<h4 id="section-1">4. 关闭每个标签</h4>

<pre><code>	&lt;p&gt;Hello World!&lt;/p&gt;
</code></pre>

<h4 id="section-2">5. 所有标签必须正确嵌套</h4>

<pre><code>	&lt;!-- 不符合 --&gt;
	&lt;p&gt;&lt;strong&gt;&lt;/p&gt;&lt;/strong&gt;
	&lt;!-- 符合 --&gt;
	&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
</code></pre>

<h4 id="section-3">6. 行内标签不能包含块级标签</h4>

<pre><code>	&lt;!-- 不符合 --&gt;
	&lt;a&gt;&lt;p&gt;Test&lt;/p&gt;&lt;/a&gt;
	&lt;!-- 符合 --&gt;
	&lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt;&lt;/p&gt;
</code></pre>

<h4 id="section-4">7. 标签全部小写</h4>

<pre><code>	&lt;!-- 不符合 --&gt;
	&lt;DIV&gt;&lt;/DIV&gt; 
	&lt;!-- 符合 --&gt;
	&lt;div&gt;&lt;/div&gt; 
</code></pre>

<h4 id="section-5">8. 属性必须有值</h4>

<pre><code>	&lt;!-- 不符合 --&gt;
	&lt;select name&gt;
		&lt;option value&gt;ZhangSan&lt;/option&gt;
		&lt;option value selected&gt;LiSi&lt;/option&gt;
	&lt;/select&gt;
	&lt;!-- 符合 --&gt;
	&lt;select name="persons"&gt;
		&lt;option value="zhangsan"&gt;ZhangSan&lt;/option&gt;
		&lt;option value="lisi" selected="selected"&gt;LiSi&lt;/option&gt;
	&lt;/select&gt;
</code></pre>

<h4 id="section-6">9. 在内容中为特殊符号使用等价的编码符号</h4>

<pre><code>exp : 

	{
		"&lt;" : "&amp;lt",
		"&gt;" : "&amp;gt"
	}
</code></pre>

<h3 id="section-7">三、文档流</h3>

<h3 id="section-8">四、浏览器的内部样式表</h3>

<h3 id="section-9">五、文档层次</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中的Width和Height]]></title>
    <link href="http://fegg.github.io/blog/20140802/javascript-width-and-height/"/>
    <updated>2014-08-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140802/javascript-width-and-height</id>
    <content type="html"><![CDATA[<h3 id="windowinnerwidthwindowinnerheight">一、window.innerWidth和window.innerHeight</h3>

<p>概念：计算浏览器窗口的内部高度（不包括工具栏和滚动条）。
通俗的来讲：整个浏览器中能够显示网页内容的部分。
特殊情况
1. 滚动条：减去滚动条部分，滚动条宽度15px;
2. 开发者工具：比如firebug，如果开发者工具处于打开的情况，在当前情况计算的innerHeight数值是不包括开发者工具所占高度。</p>

<p><img src="http://fegg.github.io/images/post/safari-client.png" alt="Mou icon" /></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">windowSize</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">width</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span>
</span><span class="line">			<span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">clientWidth</span>
</span><span class="line">			<span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">clientWidth</span><span class="p">;</span>
</span><span class="line">	<span class="p">},</span>
</span><span class="line">	<span class="nx">height</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span>
</span><span class="line">			<span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">clientHeight</span>
</span><span class="line">			<span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">clientHeight</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">windowSize</span><span class="p">.</span><span class="nx">width</span><span class="p">());</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">windowSize</span><span class="p">.</span><span class="nx">height</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>

<!--more-->

<h3 id="availwidthavailheight">二、availWidth和availHeight</h3>

<p>概念：计算用户电脑屏幕的可用宽、高，不包括任务栏。
特殊情况
1. Mac OS系统中，需要去除上、下两部分；
2. Mac OS系统中，使用QQ截图，默认选中区域 availHeight 测量出来少了6px，我猜想是由于窗口的阴影部分没有截取；
3. Window系统中，需要去除下放的任务栏。</p>

<p><img src="http://fegg.github.io/images/post/screen.png" alt="Mou icon" /></p>

<p>这里未发现兼容性问题</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">screenSize</span><span class="p">.</span><span class="nx">availWidth</span><span class="p">());</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">screenSize</span><span class="p">.</span><span class="nx">availHeight</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="offsetwidthoffsetheight">三、offsetWidth和offsetHeight</h3>

<h3 id="scrollwidthscrollheight">四、scrollWidth和scrollHeight</h3>

<h3 id="outerwidthouterheight">五、outerWidth和outerHeight</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript模块化开发－轻巧自制]]></title>
    <link href="http://fegg.github.io/blog/20140802/javascript-module-define/"/>
    <updated>2014-08-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140802/javascript-module-define</id>
    <content type="html"><![CDATA[<h3 id="section">一、前言</h3>

<p>现在javascript的流行，前端的代码越来越复杂，所以我们需要软件工程的思想来开发前端。模块化是必不可少的，这样不仅能够提高代码的可维护性、可扩展性以及鲁棒性，更大的好处就是能够提升整个团队的开发效率，也能够让新进的程序员更快的接手工作。今天晚上根据前辈们的经验，写啦一个简单的模块定义的封装组件，当是练手吧。不过感觉还是蛮好用的。</p>

<h3 id="section-1">二、学习模块化前我们应该先了解点什么呢？</h3>

<p>其实突然就学习模块化的javascript开发，那还是比较丈二和尚，摸不着头脑的。不过如果是做过后台开发的程序员们，可能对于模块化的开发思想并不陌生，因为后台的这方面技术已经很熟悉了。那么这里我就分享一下前端javascript模块化开发的学习。</p>

<h4 id="section-2">1. 了解模块化开发思想</h4>

<p>如果有软件工程背景，那么这一思想就是你自身就应该掌握的。模块（module）就是可以组合、分解以及更换的单元，其实也满足组合大于继承等这些带来的好处吧。如果看成一个系统的话，我们可以从软件体系结构来理解，模块是较大系统中的独立部件，功能、状态与接口反映外部特性，逻辑反映的是内部特性。</p>

<!-- more -->

<h4 id="section-3">2. 了解前端模块化开发带来的好处</h4>

<p>模块化的开发模式为前端带来了新大陆，这点不得不承认，现在前端的越发成熟，需要软件工程的这种思想。
玉伯也发表过<a href="https://github.com/seajs/seajs/issues/547">前端模块化开发的价值</a></p>

<p>3.了解目前技术，哪些和模块化开发沾边</p>

<p>1) 开发功能模块的时候，可以采用Eva的解决方案（YUI3 + Minify）。</p>

<p>2) 使用流行的javascript模块加载框架：seajs。</p>

<p>3) 如果喜欢轻巧的东西，也可以尝试<a href="http://stylechen.com/">带刀</a>的<a href="http://easyjs.org/">easy.js</a>，不错的一个模块加载框架。</p>

<p>4) 也可以尝试支付宝的Alice，这是一款基于CMD规范的东东，首页倒是挺小清新的。</p>

<p>5) 如今比较火的NodeJS这是必须要了解和学习的。</p>

<p>好啦，了解完上面那些技术后，模块化的前端模式应该很熟悉了，如果想扎实一下的话还可以了解一下AMD、CMD规范，具体是什么东西，google一下。接下来我们就来构造一个简单的模块定义器吧，其实写的时候还挺简单的，不过主要是吸收思想，这样学习技术才不会跟不上时代。</p>

<h3 id="section-4">三、轻巧范例</h3>

<h4 id="json">1. 模块的数据结构（JSON表示）</h4>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">//模块名称</span>
</span><span class="line">	<span class="nx">moduleName</span><span class="o">:</span> <span class="nx">moduleName</span><span class="p">,</span>
</span><span class="line">	<span class="c1">//模块依赖集合</span>
</span><span class="line">	<span class="nx">dependencies</span><span class="o">:</span> <span class="nx">dependencies</span><span class="p">,</span>
</span><span class="line">	<span class="c1">//模块实例工厂</span>
</span><span class="line">	<span class="nx">factory</span><span class="o">:</span> <span class="nx">factory</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="section-5">2. 模块定义</h4>

<p>所以我们最后能够形成模块定义的代码如下：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">define</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">moduleName</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">,</span> <span class="nx">factory</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">modules</span><span class="p">[</span><span class="nx">moduleName</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="c1">//模块信息</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">moduleName</span><span class="o">:</span> <span class="nx">moduleName</span><span class="p">,</span>
</span><span class="line">			<span class="nx">dependencies</span><span class="o">:</span> <span class="nx">dependencies</span><span class="p">,</span>
</span><span class="line">			<span class="nx">factory</span><span class="o">:</span> <span class="nx">factory</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">
</span><span class="line">		<span class="nx">modules</span><span class="p">[</span><span class="nx">moduleName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">module</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="k">return</span> <span class="nx">modules</span><span class="p">[</span><span class="nx">moduleName</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="section-6">3. 模块调用</h4>

<p>这样我们就定义好了模块，那么我们的入口在哪里呢？我们还需要定义一个use的方法，来成为所谓的main，这样绑定好了才能够调用，现在想来程序也都是这样的。下面这段代码通过递归的产生模块依赖的所有实例，但是这里浪费了一部分instances数组的空间，有时间可以再做哈优化。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">use</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">moduleName</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="c1">//使用括号的方式访问属性，实现动态的赋值（详情查阅“.”和[]的区别）</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">modules</span><span class="p">[</span><span class="nx">moduleName</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">	<span class="c1">//产生单个实例</span>
</span><span class="line">	<span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">module</span><span class="p">.</span><span class="nx">instance</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">instances</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class="line">			<span class="nx">len</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">			<span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">				<span class="kd">var</span> <span class="nx">dependency</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span>
</span><span class="line">					<span class="nx">instance</span> <span class="o">=</span> <span class="nx">dependency</span><span class="p">.</span><span class="nx">instance</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">				<span class="k">if</span><span class="p">(</span> <span class="nx">instance</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">					<span class="nx">instances</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">instance</span> <span class="p">);</span>
</span><span class="line">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">					<span class="c1">//递归，将每次产生的实例放入数组</span>
</span><span class="line">					<span class="nx">instances</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span> <span class="nx">dependency</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line">				<span class="p">}</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">			<span class="c1">//生成实例</span>
</span><span class="line">			<span class="nx">module</span><span class="p">.</span><span class="nx">instance</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">factory</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">instances</span> <span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="k">return</span> <span class="nx">module</span><span class="p">.</span><span class="nx">instance</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="section-7">4. 完整代码</h4>

<p>最后我形成完整的自己的小库。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span> <span class="nb">window</span><span class="p">,</span> <span class="kc">undefined</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">modules</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">	<span class="kd">var</span> <span class="nx">Sky</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">		<span class="c1">//定义模块的基本信息</span>
</span><span class="line">		<span class="c1">//1.模块名称，2.模块的依赖，3.产生实例的工厂</span>
</span><span class="line">		<span class="nx">define</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">moduleName</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">,</span> <span class="nx">factory</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">modules</span><span class="p">[</span><span class="nx">moduleName</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">				<span class="c1">//模块信息</span>
</span><span class="line">				<span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">					<span class="nx">moduleName</span><span class="o">:</span> <span class="nx">moduleName</span><span class="p">,</span>
</span><span class="line">					<span class="nx">dependencies</span><span class="o">:</span> <span class="nx">dependencies</span><span class="p">,</span>
</span><span class="line">					<span class="nx">factory</span><span class="o">:</span> <span class="nx">factory</span>
</span><span class="line">				<span class="p">};</span>
</span><span class="line">
</span><span class="line">				<span class="nx">modules</span><span class="p">[</span><span class="nx">moduleName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">module</span><span class="p">;</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">
</span><span class="line">			<span class="k">return</span> <span class="nx">modules</span><span class="p">[</span><span class="nx">moduleName</span><span class="p">];</span>
</span><span class="line">		<span class="p">},</span>
</span><span class="line">		<span class="c1">//使用依赖</span>
</span><span class="line">		<span class="nx">use</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">moduleName</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">modules</span><span class="p">[</span><span class="nx">moduleName</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">			<span class="c1">//产生单个实例</span>
</span><span class="line">			<span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">module</span><span class="p">.</span><span class="nx">instance</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">				<span class="kd">var</span> <span class="nx">instances</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class="line">					<span class="nx">len</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">				<span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">					<span class="kd">var</span> <span class="nx">dependency</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span>
</span><span class="line">						<span class="nx">instance</span> <span class="o">=</span> <span class="nx">dependency</span><span class="p">.</span><span class="nx">instance</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">					<span class="k">if</span><span class="p">(</span> <span class="nx">instance</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">						<span class="nx">instances</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">instance</span> <span class="p">);</span>
</span><span class="line">					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">						<span class="c1">//递归，将每次产生的实例放入数组</span>
</span><span class="line">						<span class="nx">instances</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span> <span class="nx">dependency</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line">					<span class="p">}</span>
</span><span class="line">				<span class="p">}</span>
</span><span class="line">				<span class="c1">//生成实例</span>
</span><span class="line">				<span class="nx">module</span><span class="p">.</span><span class="nx">instance</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">factory</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">instances</span> <span class="p">);</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">
</span><span class="line">			<span class="k">return</span> <span class="nx">module</span><span class="p">.</span><span class="nx">instance</span><span class="p">;</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line">
</span><span class="line">	<span class="nb">window</span><span class="p">.</span><span class="nx">Sky</span> <span class="o">=</span> <span class="nx">Sky</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class="line"><span class="p">})(</span><span class="nb">window</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>下面我们来一个完整的例子来使用一下以上我们构建的轻巧代码。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">Sky</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;constant.PI&quot;</span><span class="p">,</span> <span class="p">[],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="mf">3.1415926</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">Sky</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;shape.Circle&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;constant.PI&quot;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">pi</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="k">this</span><span class="p">.</span><span class="nx">r</span> <span class="o">=</span> <span class="nx">r</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line">
</span><span class="line">	<span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">area</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="nx">pi</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">r</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line">
</span><span class="line">	<span class="k">return</span> <span class="nx">Circle</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">Sky</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;shape.Rectangle&quot;</span><span class="p">,</span> <span class="p">[],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="kd">function</span> <span class="nx">Rectangle</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">		<span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line">
</span><span class="line">	<span class="nx">Rectangle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">area</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line">
</span><span class="line">	<span class="k">return</span> <span class="nx">Rectangle</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">Sky</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;ShapeTypes&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;shape.Circle&quot;</span><span class="p">,</span> <span class="s2">&quot;shape.Rectangle&quot;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">Circle</span><span class="p">,</span> <span class="nx">Rectangle</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="p">{</span>
</span><span class="line">		<span class="s1">&#39;CIRCLE&#39;</span><span class="o">:</span> <span class="nx">Circle</span><span class="p">,</span>
</span><span class="line">		<span class="s1">&#39;RECTANGLE&#39;</span><span class="o">:</span> <span class="nx">Rectangle</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">Sky</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;ShapeFactory&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;ShapeTypes&quot;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">ShapeTypes</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">getShape</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="kd">var</span> <span class="nx">shape</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">			<span class="k">switch</span> <span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="k">case</span> <span class="s1">&#39;CIRCLE&#39;</span><span class="o">:</span>
</span><span class="line">				<span class="nx">shape</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ShapeTypes</span><span class="p">[</span><span class="nx">type</span><span class="p">](</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class="line">				<span class="k">break</span><span class="p">;</span>
</span><span class="line">			<span class="k">case</span> <span class="s1">&#39;RECTANGLE&#39;</span><span class="o">:</span>
</span><span class="line">				<span class="nx">shape</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ShapeTypes</span><span class="p">[</span><span class="nx">type</span><span class="p">](</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class="line">				<span class="k">break</span><span class="p">;</span>
</span><span class="line">			<span class="p">}</span>
</span><span class="line">			<span class="k">return</span> <span class="nx">shape</span><span class="p">;</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">	<span class="p">};</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">ShapeFactory</span> <span class="o">=</span> <span class="nx">Sky</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s2">&quot;ShapeFactory&quot;</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ShapeFactory</span><span class="p">.</span><span class="nx">getShape</span><span class="p">(</span><span class="s2">&quot;CIRCLE&quot;</span><span class="p">).</span><span class="nx">area</span><span class="p">());</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ShapeFactory</span><span class="p">.</span><span class="nx">getShape</span><span class="p">(</span><span class="s2">&quot;RECTANGLE&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span><span class="nx">area</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>

<p>是不是感觉js代码变得更加清爽了？嘿嘿，上面的例子也是面向接口的，大家也可以看看。</p>

<p>参考前辈：<a href="http://blog.jobbole.com/43649/">http://blog.jobbole.com/43649/</a></p>

<p>也许代码有出入，有些地方前辈写得不够细心的我补上了一些，嘿嘿，但是思路是参考这位前辈的。</p>

<p>原文出自：<a href="http://www.60sky.com/">http://www.60sky.com/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript的参数传递]]></title>
    <link href="http://fegg.github.io/blog/20140802/javascript-arguments/"/>
    <updated>2014-08-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140802/javascript-arguments</id>
    <content type="html"><![CDATA[<h3 id="section">一、前言</h3>

<p>ECMA中所有函数的参数都是按照<em>值传递</em>。</p>

<h3 id="section-1">二、基本数据类型</h3>

<p>在向函数传递基本数据类型的时候，被传递的值会被复制给一个局部变量（arguments对象的一个元素）。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">test</span><span class="p">(</span> <span class="nx">x</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">//第一次赋值</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;x1 : &#39;</span> <span class="o">+</span> <span class="nx">x</span> <span class="p">);</span>	
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;arguments1 : &#39;</span> <span class="o">+</span> <span class="nx">arguments</span> <span class="p">)</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;arguments[0]1 : &#39;</span> <span class="o">+</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line">    <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;x2 : &#39;</span> <span class="o">+</span> <span class="nx">x</span> <span class="p">);</span>	
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;arguments2 : &#39;</span> <span class="o">+</span> <span class="nx">arguments</span> <span class="p">)</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;arguments[0]2 : &#39;</span> <span class="o">+</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">test</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<!--more-->

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">test</span><span class="p">(</span> <span class="nx">num</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">num</span> <span class="o">=</span> <span class="nx">num</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">num</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">test</span><span class="p">(</span> <span class="nx">num</span> <span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;num : &#39;</span> <span class="o">+</span> <span class="nx">num</span> <span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;result : &#39;</span> <span class="o">+</span> <span class="nx">result</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="section-2">三、引用数据类型</h3>

<p>在向函数传递引用数据类型的时候，会把这个值的内存地址复制给一个局部变量。所以局部变量的变化会反映到函数外部。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">setName</span><span class="p">(</span> <span class="nx">obj</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;卢林&#39;</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">lou</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">setName</span><span class="p">(</span> <span class="nx">lou</span> <span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">lou</span><span class="p">.</span><span class="nx">name</span> <span class="p">);</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">setName</span><span class="p">(</span> <span class="nx">obj</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;卢林&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="c1">//重新new</span>
</span><span class="line">    <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class="line">    <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;others&#39;</span><span class="p">;</span> <span class="c1">//其实已经不是传入的内存地址</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">lou</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">setName</span><span class="p">(</span> <span class="nx">lou</span> <span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">lou</span><span class="p">.</span><span class="nx">name</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>其实原理很简单，引用类型传入的是内存地址的值（当然JavaScript操作内存地址），比如是8bit，内存地址是：1100 1010，指向的内容是person对象。所以你修改了name属性会影响到函数外部。</p>
]]></content>
  </entry>
  
</feed>
