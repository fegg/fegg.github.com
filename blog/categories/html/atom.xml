<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Html | 小撸]]></title>
  <link href="http://fegg.github.io/blog/categories/html/atom.xml" rel="self"/>
  <link href="http://fegg.github.io/"/>
  <updated>2016-06-24T16:29:53+08:00</updated>
  <id>http://fegg.github.io/</id>
  <author>
    <name><![CDATA[小撸]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[像积木一样搭建网页]]></title>
    <link href="http://fegg.github.io/blog/20141202/play-build-web-pages/"/>
    <updated>2014-12-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20141202/play-build-web-pages</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>我们在浏览网页的时候，经常会看到很相似的几种内容。比如下面这两种样子：</p>

<p><img src="http://p4.qhimg.com/t010118aee227f746a5.png" alt="视图1" /></p>

<p><img src="http://p4.qhimg.com/t0188a9a78a17386fb9.png" alt="视图2" /></p>

<p>看上去是不是比较像呢？其实就是图片的位置不一样，大致上可以认为是一样的吧，那么针对这样子的相似度较高的网页，我们应该怎么样开发呢？</p>

<blockquote>
  <p>其实这就得谈谈“页面重用机制”了，下面所写的积木式网页构建方式就能够很好的处理页面重用这个问题。</p>
</blockquote>

<p>接下来将从以下4个方面对积木式网页开发进行描述：</p>

<ol>
  <li>分析页面结构</li>
  <li>构建网页的结构</li>
  <li>编写网页基本的样式</li>
  <li>编写不同表现的样式</li>
</ol>

<!-- more -->

<h3 id="section-1">一、分析页面结构</h3>

<p>虽然HTML的语法那些很简单，但是在网页设计和开发中，它却占据着不可动摇的地位。首先我们需要根据设计师的PSD和产品经理所描述的需求，然后确定我们网页的结构，反复的与他们沟通，确定更多的信息，才让我们的网页结构的生命周期变得更长。</p>

<p>这里推荐一个Chrome的插件，可以瞬间去除CSS和JavaScript的效果，查看到最原始网页的表现。</p>

<blockquote>
  <p>Web Developer</p>
</blockquote>

<p>下面我们要参考的结构就如下图中2种样子：</p>

<p><img src="http://p5.qhimg.com/t0138cd1fbdfbc5ff7e.png" alt="视图1" /></p>

<p><img src="http://p1.qhimg.com/t01e4dfb2288f445e02.png" alt="视图2" /></p>

<p>我用红线大致描了一下页面的信息块，接下来我们来分析一下信息：</p>

<ol>
  <li>一张展示图</li>
  <li>一个标题</li>
  <li>商品的列表信息（包括总价）</li>
  <li>附属品的列表信息</li>
  <li>购买按钮</li>
</ol>

<p>好吧，这里就不需要PM来确认啦，自己当一回PM ^8^，接下来我们需要描述网页结构。</p>

<h3 id="section-2">二、构建网页的结构</h3>

<p>经过上面的分析，我们可以得出如下的DOM结构：</p>

<p>``` html</p>
<div class="productStackWrap">
	<img class="psImage" src="http://p5.qhimg.com/t01bc7da5a2c6e90308.jpg" alt="卢林" />
	<div class="psArticleWrap">
		<h1 class="psTitle">赔本大甩卖</h1>
		<ul class="psPriceWrap">
			<li>
				<span class="spLabel">眼镜</span>
				<span class="spAmount">500元</span>
			</li>
			<li>
				<span class="spLabel">外套</span>
				<span class="spAmount">300元</span>
			</li>
			<li>
				<span class="spLabel">iPhone 5S</span>
				<span class="spAmount">88元</span>
			</li>
			<li>
				<span class="spLabel">总价</span>
				<span class="spAmount spTotalPrice">仅需888元</span>
			</li>
		</ul>
		<div class="spDescriptionWrap">
			<p>附带品</p>
			<ul class="descBulletsUL">
				<li>可乐一罐</li>
				<li>饭碗一个</li>
				<li>6块钱的麻辣烫</li>
			</ul>
		</div>
		<button class="psCTA">买买买</button>
	</div>
</div>
<p>```</p>

<p>我们这里不需要任何样式，也会是一个很美的网页，至少看起来整洁，信息整齐。（图片太大，直截取文本部分。因为图片的宽、高在初始化的时候必须要设置的，至于为什么要设置可以查阅Google，主要是给图片预留空间，提升文档性能。）</p>

<p><img src="http://p5.qhimg.com/t0146e9616541c6732a.png" alt="无样式的表现" /></p>

<p>好吧，到这里我们的DOM结构就构造完了，接下来添加一点基本的，也可以理解为公用的样式，这里的公用可以不理解为积木块共有的样式。说起来绕了一点，也就是说不同表现的共有样式可以与本身结构具有的基本样式进行分离，这个可以看自己喜好来决定。</p>

<h3 id="section-3">三、编写网页基本的样式</h3>

<p>在此之前我们来看看我本地的文件结构：</p>

<p><code>bash
demo  //文件夹
	A.css  //样式1
	B.css  //样式2
	index.css  //基本样式
	index.html //DOM结构
</code></p>

<p>这里可以处理一些基本的网页样式信息，比如恢复一些元素的默认值、调整部分间隙。这部分代码位于：index.css中，内容放入文章末尾吧，这里我们连贯的描述怎么做页面重用。</p>

<h3 id="section-4">四、编写不同表现的样式</h3>

<p>说了怎么久，DOM结构和基本样式都搞好啦，那么现在我们来实现我们的两张图。现在我们只需要做的是在最外层DOM结构中加入不同的类名：</p>

<p>``` html
// A类样式</p>
<div class="productStackWrap psTreatmentA">...</div>
<p>// B类样式</p>
<div class="productStackWrap psTreatmentB">...</div>
<p>```</p>

<p>这样我们利用CSS的权重来控制特殊的样式，其实这里的 psTreatmentA 类更像一个命名空间，如果用严格的语言来理解的话，那么可以理解为：</p>

<p><code>java
class psTreatmentA implements productStackWrap {
	...
}
class psTreatmentB implements productStackWrap {
	...
}
...
class psTreatmentN implements productStackWrap {
	...
}
</code></p>

<blockquote>
  <p>注意这里用的是接口哦，CSS的复用可以是多继承的关系，至少我是这么理解的。</p>
</blockquote>

<p>那么我们改怎么针对这个类来写属于它实例的样式呢？那么看一下下面两段代码就可以理解了。</p>

<p><code>css
/* A类样式 */
.psTreatmentA {
	width: 310px;
}
.psTreatmentA .psImage {
	width: 80px;
	height: 112px;
	float: left;
}
.psTreatmentA .psTitle {
	margin-left: 100px;
}
.psTreatmentA .psPriceWrap {
	margin-left: 100px;
	text-align: right;
}
.psTreatmentA .psCTA {
	margin: 0 auto;
}
/* B类样式 */
.psTreatmentB {
	width: 385px;
}
.psTreatmentB .psImage {
	width: 386px;
	height: 287px;
	display: block;
	margin-bottom: 20px;
}
.psTreatmentB .psPriceWrap {
	text-align: left;
	margin-left: 110px;
}
.psTreatmentB .psTitle {
	text-align: center;
	font-size: 27px;
}
</code></p>

<p>这样做了过后就能够使用同一套DOM结构，来穿上不同的样式了，技术是很简单的技术，但是不同的玩法能玩出不同的精彩哦~</p>

<p>那么，这样做有什么好处呢？这里随机列几条吧。</p>

<p><strong>场景一：</strong></p>

<p>PM说：“我们换回以前那份设计稿吧。”</p>

<p>FE说：“好的，马上弄。”（随手删除了引入的B样式，引入A样式，OK，解决问题~）</p>

<p><strong>场景二：</strong></p>

<p>PM说：“这是最新设计稿，要赶紧上线，1天能上线吗？”</p>

<p>FE说：“我看看设计稿来（啪啪啪~看完设计稿，发现其中有很多复用的网页样式）。”</p>

<p>FE再说：“我尽力吧，晚上做完回你。（使用通用的结构include，最后将之前项目中的A…N样式拿来一套，解决问题！）”</p>

<p>好处还有很多呢，等待你去发现~</p>

<h3 id="section-5">五、最后结束语</h3>

<p>虽然上面文章描述了样式上的重用，其实在JS行为的把握上我们也可以使用相同处理事情的方式，将JS行为的类将表现给分离出来，能够更好的应对需求的变更以及增加代码的可维护~</p>

<p>附：（文章例子中的基本样式）</p>

<p><code>css
.productStackWrap {
	position: relative;
	font-size: 14px;
	margin: 40px 0;
	border: 1px solid #999;
	padding: 20px;
}
.psTitle {
	font-size: 21px;
	font-weight: 700;
	margin: 0 0 5px 0;
}
.psPriceWrap {
	padding: 0;
}
.psPriceWrap li {
	list-style: none;
	padding: 2px 0;
}
.spLabel {
	display: inline-block;
	width: 75px;
	text-align: right;
	padding-right: 3px;
}
.spAmount {
	display: inline-block;
	width: 75px;
	text-align: right;
	font-weight: 700;
}
.spTotalPrice {
	color: green;
}
.spDescriptionWrap p {
	line-height: 150%;
}
.psCTA {
	background: green;
	color: #fff;
	padding: 5px 0;
	width: 120px;
	display: block;
	border: 0;
	text-align: center;
	font-size: 20px;
	text-shadow: 1px 1px 1px #666;
	border-radius: 5px;
	background-clip: padding-box;
	background: #92c436;
	background: linear-gradient(top, #92c436 0%, #97c64b 50%, #80c217 51%, #7cbc0a 100%);
}
.descBulletsUL li {
	padding: 4px 0;
}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网页的钥匙：HTML/XHTML]]></title>
    <link href="http://fegg.github.io/blog/20140802/key-pages-html/"/>
    <updated>2014-08-02T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20140802/key-pages-html</id>
    <content type="html"><![CDATA[<h3 id="web">一、web标准的重要性以及好处</h3>

<ol>
  <li>可以交付到更多的用户代理，也就是可以更好的适应多种浏览网页的容器。</li>
  <li>能够改善性能，也就是可以利用更少的代码实现相同的功能。</li>
  <li>更能够适合浏览器，对于兼容早期浏览器作出的努力更少。</li>
  <li>分离内容和表现。</li>
  <li>能够构建流动式（自适应的）页面。</li>
  <li>流水线式生产，可以让内容和表现的开发分开进行，并且能够无缝地衔接起来。</li>
  <li>使内容具有可访问性。</li>
  <li>减轻维护代码的负担。</li>
  <li>代码可以更好的适应未来。</li>
  <li>…</li>
</ol>

<h3 id="xhtml">二、XHTML的理解</h3>

<p>在学习XHTML前应该先学习XML的基础知识，这样XHTML理解起来更加容易。</p>

<!--more-->

<p>重要概念</p>

<p>DTD (Document Type Definition):  文档类型定义（详情：百度或者谷歌）。</p>

<p>XHTML标记的九大规则</p>

<h4 id="doctype">1. 声明DOCTYPE</h4>

<pre><code>3种主要标记类型

1) 严格型(Strict) : 所有标记必须符合XHTML标准。

exp : 
	
	&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt; 

2) 过渡型 : 可以兼容之前的HTML代码。

exp : 

	&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	  "http://www.w3.org/TR/html4/loose.dtd"&gt;
	  
3) 框架型 : 可以兼容XHTML不推荐的框架。

exp : 

	&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN"
	  "http://www.w3.org/TR/html4/frameset.dtd"&gt;
</code></pre>

<h4 id="xml--dtdxhtml">2. 声明XML命名空间 : 处理相应的DTD中，包含哪些已经定义的有效的XHTML标签。</h4>

<pre><code>	&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"&gt;
</code></pre>

<h4 id="section">3. 声明内容类型 : 出现在文档头部，其实可以想成设置内容编码。</h4>

<pre><code>	&lt;meta http-equiv="Content-type" content="text/html; charset=iso-8859-1" /&gt;
	
这里如果你考虑HTML5标准，推荐：
	
	&lt;meta charset="utf-8" /&gt;
</code></pre>

<h4 id="section-1">4. 关闭每个标签</h4>

<pre><code>	&lt;p&gt;Hello World!&lt;/p&gt;
</code></pre>

<h4 id="section-2">5. 所有标签必须正确嵌套</h4>

<pre><code>	&lt;!-- 不符合 --&gt;
	&lt;p&gt;&lt;strong&gt;&lt;/p&gt;&lt;/strong&gt;
	&lt;!-- 符合 --&gt;
	&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;
</code></pre>

<h4 id="section-3">6. 行内标签不能包含块级标签</h4>

<pre><code>	&lt;!-- 不符合 --&gt;
	&lt;a&gt;&lt;p&gt;Test&lt;/p&gt;&lt;/a&gt;
	&lt;!-- 符合 --&gt;
	&lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt;&lt;/p&gt;
</code></pre>

<h4 id="section-4">7. 标签全部小写</h4>

<pre><code>	&lt;!-- 不符合 --&gt;
	&lt;DIV&gt;&lt;/DIV&gt; 
	&lt;!-- 符合 --&gt;
	&lt;div&gt;&lt;/div&gt; 
</code></pre>

<h4 id="section-5">8. 属性必须有值</h4>

<pre><code>	&lt;!-- 不符合 --&gt;
	&lt;select name&gt;
		&lt;option value&gt;ZhangSan&lt;/option&gt;
		&lt;option value selected&gt;LiSi&lt;/option&gt;
	&lt;/select&gt;
	&lt;!-- 符合 --&gt;
	&lt;select name="persons"&gt;
		&lt;option value="zhangsan"&gt;ZhangSan&lt;/option&gt;
		&lt;option value="lisi" selected="selected"&gt;LiSi&lt;/option&gt;
	&lt;/select&gt;
</code></pre>

<h4 id="section-6">9. 在内容中为特殊符号使用等价的编码符号</h4>

<pre><code>exp : 

	{
		"&lt;" : "&amp;lt",
		"&gt;" : "&amp;gt"
	}
</code></pre>

<h3 id="section-7">三、文档流</h3>

<h3 id="section-8">四、浏览器的内部样式表</h3>

<h3 id="section-9">五、文档层次</h3>
]]></content>
  </entry>
  
</feed>
