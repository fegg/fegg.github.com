<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: React | 小撸]]></title>
  <link href="http://fegg.github.io/blog/categories/react/atom.xml" rel="self"/>
  <link href="http://fegg.github.io/"/>
  <updated>2016-06-11T00:41:49+08:00</updated>
  <id>http://fegg.github.io/</id>
  <author>
    <name><![CDATA[小撸]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redux 能做什么？]]></title>
    <link href="http://fegg.github.io/blog/20160517/redux-can-do/"/>
    <updated>2016-05-17T00:00:00+08:00</updated>
    <id>http://fegg.github.io/blog/20160517/redux-can-do</id>
    <content type="html"><![CDATA[<h3 id="redux-">一、我先给一个 Redux 的定义</h3>

<p><code>Redux</code> 被大家知道应该都是来自于 <code>React</code> 的出现，但是这篇文章会通过介绍一个 <code>React</code> 之外的例子，来让大家理解 <code>Redux</code> 是什么东西，到底还能够做点撒。</p>

<p>我自己的理解是：</p>

<blockquote>
  <p>Redux 是一个改变<strong>状态(state)</strong>的模型，这个模型通过一个单向操作的方式来改变<strong>状态</strong>，用数学符号的方式来理解我认为应该是：<code>y = f(x) </code>，嗯，就是一个最简单的函数模型。</p>
</blockquote>

<p>不过这样说，有些人还会不理解，毕竟以前撸代码不是这个样子的，那么我们先反向的来获取自己的理解。</p>

<p>首先，我们需要知道 Redux 有的以下几个东西：</p>

<ul>
  <li>createStore</li>
  <li>reducer</li>
  <li>dispatch</li>
</ul>

<p>我觉得需要介绍清楚 Redux ，知道这三个就行了，至于还有一些函数我觉得都是调味料，这里先不介绍。</p>

<!-- more -->

<p>好吧，现在我就把上面的数学函数模型语义的转换一下（也许不一定对，但是可能暂时这样理解，理解是一个过程）：</p>

<ol>
  <li>第一步：<code>newState = store(reducer)(state)</code></li>
  <li>第二步：<code>newState = reducer(state)</code></li>
</ol>

<p>为什么这里可能理解成两个步骤呢？那是因为我们可以从不同的层面去认识 Redux，在第一步中我的理解是store里面的东西(reducer)去改变了 state，而在第二步中，我以实际会起到作用的层面去理解，就是 reducer 去改变了 state。</p>

<p>好吧，来个对比：</p>

<pre><code>y = f(x)
newState = reducer(state)
</code></pre>

<p>最后我自己先得出一个结论：</p>

<pre><code>f &lt;=&gt; reducer ( &lt;=&gt;: 表示等价的意思)
</code></pre>

<p>好吧，废话就上面那么多了，接下来我举一个实际的例子来理一下自己对 Redux 的理解，这个例子是我在一篇文章中看到的，觉得不错。</p>

<h3 id="section">二、 先介绍一下这个例子的效果</h3>

<p><img src="/images/react/game.gif" alt="演示" /></p>

<p>这里我们要实现的效果就是：</p>

<p>点击飞机，让飞机随机移动到一个新的坐标点</p>

<p>这里我们可以理解为：新坐标[x1, y1] = f(原始坐标[x0, y0])</p>

<h3 id="section-1">三、开始撸一个实例</h3>

<p><strong>1.首先我们需要定义个 <code>f</code> 来修改坐标</strong></p>

<pre><code>/**
 * reducer
 * @param state 坐标状态
 * @param action 执行的行为
*/
function coordinates(state = [1, 1], action) {
    switch (action.type) {
        case CLICK:
            return [
                state[0] + 40 * Math.random(),
                state[1] + 40 * Math.random()
            ]
        default:
            return state;
    }
}
</code></pre>

<p>这个函数主要就是使初始坐标 <strong>[1, 1] =&gt; [1 + random, 1 + random]</strong> 这样返回一个全新的数组，这个全新的数组就是新的状态。</p>

<p><strong>2.我们再将这个 <code>f</code> 函数给 Redux 的 Store 去管理</strong></p>

<pre><code>/**
 * 创建 Redux 的 Store(存储器)
*/
let store = createStore(coordinates);
</code></pre>

<p>这个比较简单，就是通过传入 <code>f</code> 来创建一个 Store，对于 Redux 来说有且只有一个 Store，这个和 flux 有比较大的差别。</p>

<p><strong>3.然后再定义一个行为，使我们能够通过 dispatch 调用这个行为去改变 state</strong></p>

<pre><code>/**
 * action
*/
const CLICK = 'CLICK';
/**
 * @returns plainObject =&gt; action
 */
function click() {
    return {
        type: CLICK
    }
}
</code></pre>

<p>在 Redux 中，只有通过 <code>dispatch</code> 方法去改变状态，就是因为这样，才让我们调试代码变得简单，复现 BUG 更加容易，因为它是单向的，顺着一个方向在流动数据。</p>

<p><strong>4.接下来就写一下 dispatch</strong></p>

<pre><code>plane.events.onInputDown.add(() =&gt; {
    store.dispatch(click())
}, null);
</code></pre>

<p>先抛开其他代码，我们剥离一下：</p>

<pre><code>store.dispatch(click())
</code></pre>

<p>这样就会去调用行为，然后执行我们上面定义的 <code>coordinates</code> 函数，返回一个新的坐标</p>

<p><strong>5.最后我们再订阅一下具体改变我们飞机位置的业务代码</strong></p>

<p>上面的写完后，我们只是返回来状态，但是还没体现到飞机在场景下的移动效果。我们能够通过</p>

<pre><code>store.getState()
</code></pre>

<p>来获取最新的当前状态，其实在 Redux 源代码里面就是很简单的一个函数：</p>

<pre><code>function getState() {
	// 这里的 currentState 是一个外部的变量，在 Store 的作用域下全局生效
	return currentState;
}
</code></pre>

<p>好吧，现在我们让飞机订阅一下移动的函数：</p>

<pre><code>/**
* 定义 plane(飞机) 的移动
*/
function movePlane(plane) {
	game.add.tween(plane).to({
    	x: store.getState()[0],
        y: store.getState()[1]
    }, 1000, 'Linear', true);
}
/**
* 移动事件的订阅
*/
store.subscribe(movePlane.bind(null, plane));
</code></pre>

<p>大家会想，为什么我订阅了就自动调用 movePlane 生效了呢？在 Redux 内部会调用当前的监听器，源代码如下，很简单，监听器就是一个数组来装的，最后移出来执行一下：</p>

<pre><code>function subscribe(listener) {
    var isSubscribed = true;

	ensureCanMutateNextListeners();
    nextListeners.push(listener);
    
    // 然后会返回一个取消订阅的函数，这里省略
}
function dispatch(action) {
	// 省略一些杂七杂八的异常处理代码

	try {
		isDispatching = true;
		currentState = currentReducer(currentState, action);
    } finally {
    	isDispatching = false;
	}

	// 执行的代码
	var listeners = currentListeners = nextListeners;
	for (var i = 0; i &lt; listeners.length; i++) {
		listeners[i]();
	}

	return action;
}
</code></pre>

<p>好吧，这样就是一个游戏的流程来，在 Redux 的帮助下，很好的组织了代码，优雅的完成了。执行代码的流程是这样的：</p>

<blockquote>
  <p>dispatch(click()) =&gt; update reducer =&gt; subscribe() =&gt; 飞机移动新位置</p>
</blockquote>

<p>这个例子很好的解释了脱离 React 的束缚，很纯粹的 Redux，原文翻译有点慢，干脆就自己写了一下。</p>

<p>项目所有的代码：<a href="https://github.com/fegg/redux-game">https://github.com/fegg/redux-game</a></p>

<p>参考英文原文：<a href="http://atendesigngroup.com/blog/redux-outside-react">http://atendesigngroup.com/blog/redux-outside-react</a></p>
]]></content>
  </entry>
  
</feed>
